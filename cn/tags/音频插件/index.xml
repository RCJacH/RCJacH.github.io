<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>音频插件 on RCJacH</title><link>https://RCJacH.github.io/cn/tags/%E9%9F%B3%E9%A2%91%E6%8F%92%E4%BB%B6/</link><description>Recent content in 音频插件 on RCJacH</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Jul 2021 20:12:58 +0800</lastBuildDate><atom:link href="https://RCJacH.github.io/cn/tags/%E9%9F%B3%E9%A2%91%E6%8F%92%E4%BB%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Airwindows Console插件系列概念及使用简介</title><link>https://RCJacH.github.io/cn/blog/aw-console-basics/</link><pubDate>Tue, 06 Jul 2021 20:12:58 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/aw-console-basics/</guid><description>我在上一篇文章中对比了一下Airwindows的Console插件， 今天我要讲讲怎样使用它们。
在此之前，请允许我先唠叨一下该系列插件的原理。
Airwindows Console插件的原理 Airwindows Console系列插件追求的是模拟(emulate)模拟(analog)调音台的相加效果。
相加效果，summing，指的是把多个信号合并在一起的过程。 对于数字信号而言，summing就是简单的加法。 举个例子， 数值为1的采样A与数值为2的采样B相加之后， 总和为3。
数学是不是很奇妙？
模拟调音台就不一样了。 它们是电力驱动的。 每个电子元件都需要用电来描绘信号、传递信号。 非常美好。 不过会出现以下这个现象。 当多个信号出现相位抵消的时候， 由于每个通道依然需要使用能量 (虽然相位抵消把这个能量“浪费”掉了)， 导致相关的电子元件变得更不稳定、更易失真， 会让信号受到一些不可描述的影响。
Console插件模仿的正是这个现象。
那它们是怎么实现的呢？
稍微有些复杂， 因为每个版本和变异所用的算法都稍微有些不同。 幸运的是， Airwindows的作者Chris写了一个剥离了染色功能只保留了核心概念的简化版。
PurestConsole。 也正是我上篇提到的日常款。
其算法很简单。 每个音轨过一个正弦函数sin(x)添加正失真， 经过DAW自带的（数字）summing功能合并之后， 再过一个反正弦函数arcsin(x)来逆转之前的失真。 Chris称之为反失真。
如果你觉得&amp;quot;Talk is cheap, show me the code&amp;quot;：
asin(sin(A) + sin(B)...) 如果你对视觉更敏感的话， 点击这里查看我在Desmos上做的图。
图中：
X轴为时域 Y轴为振幅 黑线为原信号 红线为Console渲染后的输出 蓝线为其中的差值－干湿之间的区别 目不转睛看一会儿（手动调一调参数）能注意到以下两点：
信号增强比例和输入音量成正比。 当输入总和高于0dB (y &amp;gt; 1)时， 输出值则属于未定义域。 实际使用时估计会有难听的失真， 所以do your gain-staging。 概念简要解释结束， 接下来让我们聊聊实际制作中的设置和应用吧</description></item><item><title>如何挑选Airwindows Console插件系列</title><link>https://RCJacH.github.io/cn/blog/aw-console-comparison/</link><pubDate>Thu, 01 Jul 2021 16:48:52 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/aw-console-comparison/</guid><description>Airwindows的仿调音台Summing功能的Console插件系列是好东西， 一些人甚至觉得比某款知名的A级模拟调音台还要好听。 自从开发者Chris Johnson把他家插件免费化了之后， 我每个工程都会大量使用。
最近我终于想明白了如何在REAPER内搭建Console系统 （之后有空再翻译）， 所以在想办法把Console插件直接嵌入到各种模板里。
不过他家插件有个小小的问题……选择太多了。
目前为止， 他已经出了两百多个免费插件了， 光Console相关的插件就已经有12个。 而且他每周都在开发新算法， 我作为用户反而有点跟不上他的开发速度。
对于收藏家来说， 能收集那么多奇特的染色插件来丰富我们的调色板是件非常幸福的事情。 更何况其中很多插件就像扭蛋一样， 使用之前根本不知道是干什么用的， 每次都有种拆礼物的感觉。 但是对于音频工作者来说， 这点反而是个灾难。 因为在制作过程中我们不希望被选择恐惧症打断思路， 也没有多少时间尝鲜。 实际上， 有效的工作流程应该是有一个常用插件外加两三个功能明确的代替品。 为了实现流畅的操作我们必须得使用空闲时间对这些资源进行整理， 挑出适合的， 舍弃用不上的。 为此，我创建了一个专门对比所有Airwindows Console插件的REAPER工程， 来看看每种Console到底染了什么色， 有什么区别， 哪个是最优选。
俗话说是驴是马拉出来遛遛。
工程放到REAPER官网上了，点击这里进入下载页面。
使用方式：
播放工程。 把单个静音的轨道Solo来听正弦波过Console Channel + Bus的声音。 静音的轨道名是所用的Console插件名称。 有一个没有挂插件的None轨道， 可以当成参考用的干信号， 也可以用来反向抵消其他轨来听失真染色的声音。 总线挂了几个自带的测量插件， 应该能对理解每个染色具体什么样能有些帮助， 尤其是频谱。 三个Source音轨挂了都挂上了自带的ReaSynths音源， 其中source 1在播放440Hz， source 2为880Hz（第一个泛音）， source 3则是用来测试非泛音的频率。 经过对比，我观察到了以下几点：
大部分插件哪怕仅有单轨输入也会产生失真， 除了Atmosphere, Console5RAW, Console6以及那两个PurestConsole。 多轨Summing肯定会有失真。毕竟染色就是失真，不给染色我们用这个插件干嘛。 所有失真都会产生直流偏差（0Hz信号）， 所以在ConsoleBus之后需要添加一个直流滤波器。 此方面自带的ReaEQ是所有插件中CPU用量最少的， 用它加一个20Hz的高通可以过滤大部分的偏差。 如果你想把其全部切除， Airwindows的Infrasonic插件能完美实现， 代价是更高的CPU用量。 染色是非线性的。 更高的输入音量会使过载算法产生更多泛音， 并且整个信号会在接近0dB的地方被削波， 所以别忘了Gain-Staging。 仅用正弦波的话，最难听的失真来自于Console4、Console6、及uLaw。 根据我个人的判断，最好听的几款如下： Atmosphere。据说是为了模拟声音在空气中融合的听感。 其失真较平均，没有突兀的听感。 Console5。更饱满，全频段失真上至奈奎斯特； Console5Dark， 此变异与原版反向后差别在-80dB左右， 而且主要是原频率以及前几个泛音， 但用Span把两个信号叠起来又看不出来什么区别。 此款CPU用量更少； Console5Raw，一个更干净的版本， 不过据说会出现一些不稳定的直流偏差。 Console7。听起来更空洞，基音音量会稍微小一点。 它还有个失真稍微更大一点的兄弟叫Console7Cascade。 PDConsole，PD代表Purest Drive。此款听起来失真量最小。 PurestConsole初版。 经不严谨测试它能跟PurestConsole2完全抵消， 但这款的CPU用量是所有Console里面最少的，都不到二代的一半。 而且！！这款跟Atmosphere也能完全抵消！！ 总结一下， 日常用PurestConsole， Console7当成超级模拟染色的Summing盒（它CPU用量最高）， PDConsole来当软胶（胶指粘合多个轨道的功能）， Console5或者Console5Dark当纽约式指脸怼人的硬胶。</description></item></channel></rss>