<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>脚本 on RCJacH</title><link>https://RCJacH.github.io/cn/tags/%E8%84%9A%E6%9C%AC/</link><description>Recent content in 脚本 on RCJacH</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Jan 2022 16:29:02 +0800</lastBuildDate><atom:link href="https://RCJacH.github.io/cn/tags/%E8%84%9A%E6%9C%AC/index.xml" rel="self" type="application/rss+xml"/><item><title>RCInflator：破解百万级音频效果器算法，打破资本主义技术壁垒（大雾</title><link>https://RCJacH.github.io/cn/blog/rcinflator/</link><pubDate>Sat, 08 Jan 2022 16:29:02 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/rcinflator/</guid><description>欢迎来到我们插件发布会的直播间， 我是本次直播的主持人， 也是本司的CEO，CTO，COO，CFO&amp;hellip;（以下省略100个职称） RCJacH。 在开始之前有我邀请大家阅读以下三个注意事项：
请不要询问为什么我们选择以文字形式直播。 大家都是音乐人， 都有非常高端的脑放。 调制旁通的插件都能听出变化， 文字转语音会有什么困难吗。
文中有一些【鼓掌】的标签， 是为了触发脑放中的鼓掌采样， 这样能显得有很多人关注这种冷门话题。
今天狗头不够用， 请大家自行脑补。
好了， 今天我们将要发布一款革命性的音频插件， 不过在此之间我先给大家科普一下行业现状。
音频插件行业一直被国外的资本主义统治。 而这些“恶毒的”资本家为了“剥削”我们这些用爱发电的音乐人， 用尽花言巧语引诱我们消费、 “骗取”我们的财产。 由于音频插件是个黑盒， 具体算法除了作者谁也说不清， 好不好使全靠“吹”， 这导致一些“聪明的”资本家发现只要找外包做个生锈破皮的硬件3D建模、 写个不知所云的宣传文案， 文中使用一些平时不会出现在同一个句子的抽象词， 例如“warmth（温暖）”、“glue（粘合）”、“life（生命）”、“power（力量）”、“tube（电子管）”等， 再贴上几张硬件设备的照片让买家产生联想， 就可以平躺收税了。
更可恶的是， 部分资本家并不满足于此， 而是会想尽办法榨干用户的剩余价值。 修几个Bug收一次钱， 整理一下代码库收一次钱， 重画个GUI又来收一次钱。 作为现实主义的加班人， 我们要全力抵制这种行为， 时刻提醒自己不可被华丽的外表蒙蔽双眼， 妥善对待口袋里的一块二毛三分钱。
有句古话说得好， 自己动手成单身狗丰衣足食。 经过十分钟长时间的艰苦奋斗， 我终于自主研发出了一款新的音频插件。
【鼓掌】
这款插件名叫RCInflator。 RC就是我， 因为是我做出来的， 所以肯定要写上我的名字， 不然写谷歌么？ Inflator则是插件的名字， 来源于inflate一词， 意思是通货膨胀。
非常符合当前的全球经济发展动向。
【鼓掌】
我在这里说明一下， Inflator这个词可能会使有些人联想到十几年前的一款同名插件, 但实际上这两者是完全不同的插件。
首先这两款的功能不一样。 我们来看一下那款同名插件的宣传文：
A unique and powerful plugin to increase loudness, without sacrificing sonic quality or dynamic range.</description></item><item><title>如何在REAPER内制作LRC格式的滚动歌词</title><link>https://RCJacH.github.io/cn/blog/lrc-maker/</link><pubDate>Tue, 21 Sep 2021 22:25:43 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/lrc-maker/</guid><description>前几天我终于让某云音乐的个人全部歌曲+1了。 为了摸鱼制作更精准的滚动歌词，我写了一个自动生成LRC的脚本。 LRC格式说白了就是每行歌词前面多一个时间位置信息。
脚本去RCJacH的ReaPack库自取。
脚本名叫RCJacH_Generate LRC Lyrics and Export to Clipboard.lua。
如果你没有ReaPack， 也可以直接另保存脚本源文件。
这个脚本的使用方式如下：
创建一个专门写歌词的轨道，轨道名随意。 在每行歌词起始位置创建一个MIDI块儿，并把Take名改成该行歌词。 MIDI块儿长度暂时不影响输出。 如果想添加标签，可以在Take名最前面加一个#。 例#ar: 歌手会变成[ar: 歌手]。 这种标签是给播放器用的，但后来发现某云会自己生成部分标签。 如果你想让两行之间有空隙，请使用一个空名的MIDI块儿。 选择该歌词轨。 运行脚本。 该脚本会把这些歌词合并到一起，并拷贝结果至系统剪切板中，最后给你一个预览用的小弹窗。
看起来像这样。
如图中示范， 你通过选择不同轨道来生成不同语言的歌词。
额，该脚本不包含翻译功能。
用了这个脚本我们就可以把歌词滚动量化到拍子上了（跟我们的音乐一样）【微笑
以上。
PS. 动图中的歌曲是这首。</description></item><item><title>Cubehelix颜色表算法</title><link>https://RCJacH.github.io/cn/blog/color-cubehelix/</link><pubDate>Mon, 30 Mar 2020 16:56:11 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/color-cubehelix/</guid><description>我一直对自动生成颜色表的算法情有独钟。通过规则和公式来生成一系列适合搭配的颜色能让我很有满足感。而仅靠个人喜好在一千六百七十七万七千两百一十六个不同的 RGB 颜色中挑出最适合当前工程的那么几个出来总是能很有效的带来海底捞针样的疲惫感。不过这不是今天的话题。今天我是来介绍一个叫 CUBEHELIX 直译为立方螺旋的色盘生成算法。
在进入主题之前，我们先回顾一下传统的配色表通常是什么样的。
当你在某些打不开的搜索引擎上搜索色图色表的时候，搜索结果通常是这样的：
或者像这种多色系的：
渐变：
甚至整个配色表：
小贴士: 文字可点击
这类工具在平面设计或者UI设计阶段的确能够激发灵感，但人嘛，一年总有那么十几个月想用一键生成的工具。【严肃脸】主要是因为它们可以抑制我们人类在选择单个元素时犹豫不决，反复推敲的冲动，有效的降低了拖延病的发作机率。【伪
不过话说回来，有时自动生成的算法的确更有利一点，尤其是在构造可视化数据的时候，例如音频频谱图。
别说，我之前就在开发一个配器相关的音乐数据库（目前仍然 WIP）。由于是五线谱，纯黑白的极简主义有点太单调了，毕竟漫画还有彩图封面呢不是么。所以当时想要加点更生动的视觉反馈 - 把每个音符依据他们在和弦中的功能进行染色。我尝试了十几种颜色表，很遗憾，都很丑。倒不是色表的问题，主要是因为由于出现的音符较多，关系比较复杂，所以为了表明音符之间的关联，需要很多不同的颜色，不同的色调。而由于这个数据库又无法提前知道哪个颜色最终会挨着哪个颜色&amp;hellip; 所以渲染后经常会出现一些挑战审美极限的结果。不美。
直到它出现了。
什么是 CUBEHELIX 由于作者很慷慨地为CUBEHELIX 算法专门建立了一个网页，解释了其创作思路并给出论文地址，我在此就跳过长篇大论，简单地介绍一下好了。
Cubehelix &amp;ldquo;立方螺旋&amp;rdquo; 算法会生成给定数量的颜色列表。此颜色表拥有线性增加的强度曲线，同时也会在色轮周围旋转产生各种颜色的渐变。
英文有句话说一张图顶千字稿费，我们还是上图吧。立方螺旋颜色表长这个样子：
这个算法还有另一个优点。生成的色表在转换为灰度或替换色调后，其强度的变化不会有影响。这点挺重要的，因为红绿蓝三色本身的感知亮度是不一样的，所以如果更改了基础色，还需要再修一遍整体平衡。这个算法能够在不破坏亮度平衡的情况下替换起始颜色在应用上还是非常省心的。
伸手党通道 您可以通过以下渠道购买 咳咳 免费获取 cubehelix 色表。如果只需要生成结果，而不需要引用算法的话，以下几个在线的生成器就足够了。
原官方在线效果预览。这里有五个参数，点击页面中间的 refresh plots 按钮在右侧预览颜色，通过下方四个按钮能在新页面中获取浮点、8位定点、或16进制字符串格式的颜色列表。
另一个有七个参数的在线预览。这款还能显示更顺滑的渐变以及亮度渐变。另一个亮点是结果色表所有的颜色在十六进制编号旁边还会有个颜色预览，便于挑选。
如果你想要脚本版，我之前贴的官贴里面最下方有个列表。
以下几款是我觉得值得点名的，因为这些库还挺常见的。
Cubehelix in Chroma.js
Cubehelix in MATLAB
Cubehelix in Matplotlib，在页面最底左右
Github上有很多python脚本也加了&amp;quot;立方螺旋&amp;quot;算法。我尝试过一些，但由于三个原因被劝退：1，他们主要是用于做数据图的，所以相关函数返回的东西都不是马上能当成颜色列表用的；2，为了一个简单的颜色生成器安装整个巨大的库，例如matplotlib，有点不值；3，部分库没有优化性能（用numpy之类的），很多都是直接通过循环计算的。所以我花了点时间写了个能生成颜色列表的cubehelix算法模块. 并多加了一点可自定义的参数。
敝人的脚本 作为一个音乐制作人（希望我现在还算一个音乐制作人），我一直在用Python来写各种日常自动化的脚本，例如：
import numpy as np print(&amp;#34;Hello World!&amp;#34;) # 不会了 我写了一个生成cubehelix色表的脚本。其目的是生成一个颜色列表，每个颜色以浮点(0.</description></item><item><title>REAPER - 原创JSFX小游戏RCMShip Perfect Pitch</title><link>https://RCJacH.github.io/cn/blog/rcmship-perfect-pitch/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/rcmship-perfect-pitch/</guid><description>RCMShip Perfect Pitch下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器RCJacH ReaPack Repository
如何使用ReaPack？
简介 RCMShip （MShip代表musicianship，即音乐修养、视唱练耳）Perfect Pitch是一款包含自适应随机算法的原创JSFX游戏，用来练习绝对音感的能力。
游戏方式 点击 START后，游戏将播放一个固定音高。 猜测该音高的音名并点击相关按钮。 回答后，游戏将将显示正确答案，若答错也会显示所选答案。 点击 Next 将继续下一轮。 特色 自适应 当玩家做出回答后，回答的正确与否将影响当前所播放的音出现的几率。
可选性 点击Setup将转至音符选择页面，在此你可以手动或随机选择游戏所包含的音高，限制游戏难度或者增加变化。
可配置 点击Config按钮切换到设置页面，可以设置一些基本参数，例如音量、音符长度、播放的八度和八度跨越等。也可以切换至MIDI输出模式，用采样播放器或者其他合成器作为音源。
进阶介绍 理论 来自404（wiki）：&amp;ldquo;Absolute pitch (AP), widely referred to as perfect pitch, is a rare auditory phenomenon characterized by the ability of a person to identify or re-create a given musical note without the benefit of a reference tone.&amp;rdquo; 绝对音感是一个罕见的听觉现象，指的是一个人有能力在没有参考音高的情况下识别或重现一个给定的音符音高。
绝对音感通常被视为一个与生俱来的能力，而当前虽然有一些科研性或商业性的相关产品，但还未能证明其对大众的有效性。 然而，虽然音频工作者们（录音师、混音师、母带师）需要花数些年的时间练习分辨音频的振幅、频率、时间等各种性质，长时间地针对绝对音感进行相关练习的人可能并不是多数。 在这种情况下，对于绝对音感是天生而来的主张可能没有太多的实际证明。</description></item><item><title>Tone Sweep – 原创JSFX电鼓合成器</title><link>https://RCJacH.github.io/cn/blog/tone-sweep/</link><pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/tone-sweep/</guid><description>Tone Sweep下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器
介绍： Tone Sweep是一款能生成一个音高变化（扫频）的单音电鼓合成器。主要用于设计电子音乐中使用的鼓，例如低鼓，军鼓，铜鼓，以及音效。
用法： 设置起始音高（StartingNote）以及目标音高（EndingNote）。
通过拖动图形的X和Y轴按需求设置扫频的曲线和时长。
使用Envelope图形以及下方参数设计音量包络。
输入MIDI或者用MIDI键盘输入音符，播放一下。
阅读下方更具体的参数解说。
控制器类别： 通用 Ctrl+鼠标左键重置至默认数值。
推子 可以通过直接点击推子或者按住鼠标左键后左右拖动来设置一个数值。拖动时可按下Shift或Alt键微调：Shift改变0.01，Alt改变1。注意，要先松开鼠标左键，后松开修饰键，否则数值将被设置为鼠标位置对应的数值。
选框 点击改变改参数的开启状态。
拖拽框 点击按住鼠标左键并上下拖动鼠标来改变数值，拖动时按住Shift可微调。
图形 点击按住鼠标左键并拖动鼠标来开遍数值，拖动时按住Shift可微调。X轴和Y轴可能分别影响两个不同的参数。
界面参数说明： 概述页面 这个是插入JSFX后显示的第一个页面，包含了此合成器的两个最主要的元素，音高扫频和音量包络。
任何图形的X轴参数决定了其长度，Y轴参数决定了曲线的坡度。音量包络图形则包含三个不同的部分，Attack，Hold，和Decay。每个部分有他自己的X和Y轴。音量包络图形下方有几个拖拽框可以改变曲线形状以及时长。
在整个界面最低端有一个不可操作的波形图样，作为视觉参考。
音高页面 第二个页面是音高页面，包含了此合成器中所有与音高、频率有关的参数。
Pitch 音高 A4：这个参数是音高标准，指的是A4（MIDI音高69）这个音的频率，默认为440。
Starting Note：扫频的起始音高。
Ending Note：扫频的目标音高，可以同起始音高一样，或高于起始音高。
Fine Tune：这两个操作将改变对应音高的音分，即百分之一个半音。
Sweep 扫频 Time：这个指的是扫频，从起始音高到目标音高，总共需要花的时长（毫秒）。
Curve &amp;amp; Multiplier：这两个参数决定了扫频的曲线坡度。
Shape：这个参数决定了曲线的形状。
此页面右下角的音高曲线图形与概述页面中的相同。
音量包络页面 此页面包含了所有对音量包络有影响的参数。此合成器，作为电鼓合成器，音量包络只有三个阶段，Attack（起音）、Hold（停留)、Decay（衰减），或AHD。
起音阶段指的是，当接收到MIDI音符触发信息后，包络值从0%到达100%的阶段；停留阶段指的是当达到100%后所持续的时间；经过停留阶段，包络值开始从100%衰减至0%
起音和衰减阶段的曲线控制原理与扫频曲线原理相同。
音量包络图形与概括页面的图形一样。
波形页面 波形页面所包含的是那些会改变输出信号音色的参数。
Waveform：通过此参数选择合成器的基础波形。
Modulations 调制 此合成器有两个调制选项，AM振幅调制（Amplitude Modulation）和FM频率调制（Frequency Modulation）。AM通过一个波形来改变源信号的振幅，而FM则通过一个波形变动源信号的频率。</description></item><item><title>音乐创作之 全排列 脚本</title><link>https://RCJacH.github.io/cn/blog/script-list-permutation/</link><pubDate>Mon, 13 Feb 2017 20:38:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/script-list-permutation/</guid><description>为了让音乐创作之全排列技巧变得更直观，我做了一个简单的脚本。
全排列脚本地址
这个脚本按着输入的音符（或者字符）以及所需要的变化数量，随机生成几个修饰方式以及相应的全排列。
使用方法： 第一行的变量为音程修饰的总数，改成0则生成无修饰的全排列。
第二行的大括号内为所使用的字符，第一项和最后一项是范围之外的临时变化。中间可以输入任意数量的字符。默认为C大调的1 2 3 4（以及作为临时变化的7和5）
设置好了之后点击上方的Run，就可以在低下的结果栏里显示出来所有的排列。
此脚本可以作为一个学习、检查、或者激发灵感的工具，真正弹奏的话还是建议把这个全排列技术练成本能。</description></item><item><title>Reaper字符串快捷键系统：Vimper Solo</title><link>https://RCJacH.github.io/cn/blog/vimper-solo/</link><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/vimper-solo/</guid><description>当我们开始挖掘REAPER内隐藏着的几千个操作（Action），并且随着ReaPack的成长不断添加新的用户自制脚本与扩展时，我们会发现当我们需要自定义快捷键时，能用到的键位越来越少。而为了充分利用现有的字母、数字、以及符号键，我们通常需要加上各种如Ctrl，Alt甚至Win的修饰键进行各种高难度的键位组合，而且经常过几天可能就会忘掉一大半。
为了避免这种尴尬，我做了一个按组归类快捷键的脚本。它是依照VIM文本编辑器快捷键的理念，通过一串字符触发快捷键的。
点击这里下载Vimper Solo。
通过这个脚本，我们不需要去记各种修饰键，只需按组激发对应的键位就好了。例如，在这个脚本内，同一个m键可以根据不同的分组静音轨道、块或层，但在REAPER里，我们得去想到三个不同的修饰键组合来触发这三个不同的功能。有的时候由于记不住某个操作是要按Shift还是要按Ctrl还是Ctrl+Shift需要反复去试，浪费很多时间。
使用方法： 解压后把整个文件夹放到资源目录的Script文件夹内，然后在Reaper的Action List中加载RCJacH_Vimper Solo并为其设置一个快捷键（我用的是分号;）。
触发脚本，根据GUI窗口提示进入不同的分组并触发不同的操作。
使用Backspace退格键返回上一层菜单。
也可以在Action List中加载RCJacH_Vimper Solo Repeat Action来反复触发上一次触发操作。
在Bindings.lua文件里，可以依照现有项设置新的快捷键或者修改现有的快捷键。
格式：
分组= {
NAME = “分组”,
快捷键= {CommandID, 所显示的名称},
}
*注意，任何分组必须得包含NAME= “名称”一项，否则识别不到。
**分组可以有无数层。
***如果添加新的总分组，得在最底下的return{}里添加。
****快捷键目前区分大小写。
*****显示名称可以使用中文。</description></item><item><title>Reaper JSFX: NoiseBuzz噪音生成器</title><link>https://RCJacH.github.io/cn/blog/noisebuzz/</link><pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/noisebuzz/</guid><description>我们在混音或者声音设计的时候，经常需要在现有的军鼓上面叠一层噪音，这样能让军鼓听起来更满一点。为此，我们可能需要插入一个噪音生成器、一个门限再加上各种滤波器。我觉得调制起来很麻烦所以就把这三个放在了一起，做成了JS插件。这个插件会在输入音频信号超过Threshold阈值后触发动态噪音信号（噪音音量与输入音量有直接关系），并可以通过选项来调制这个噪音的动态包络以及频段限制。
这个插件可以用于军鼓轨道（通常是军鼓bottom mic），或者放在Overhead、Room、甚至混响轨来添加一些房间的沙沙声。甚至可以叠在HiHat轨以及Supersaw合成器轨。随意玩。
v1.3 (2018-03-08) Brown Noise Type. MIDI Trigger. Fixed sustain. Renamed to RCNoiseBuzz since the update broke backward compatibility. v1.2 (2017-04-08) Width Control. v1.1 (2017-03-11) Decay &amp;amp; Sustain Control. v1.0a (2017-01-31) Renamed to NoiseBuzz. v1.0 (2017-01-22) Initial Release. 下载地址： RCNoiseBuzz官网下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器</description></item><item><title>REAPER JSFX - AB Comparison 8路信号对比脚本</title><link>https://RCJacH.github.io/cn/blog/ab-comparison/</link><pubDate>Fri, 20 Jan 2017 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/ab-comparison/</guid><description>昨天做了个JSFX小脚本：AB Comparison。目的是更方便的监听和对比不同信号（比如说不同插件、不同轨道）。
这个脚本可以根据所设置的节拍或者微秒长度，自动切换到不同的双声道通道。同时还包含一个盲听模式。
使用方法： 在任意音轨上放置 AB Comparison 这个JS脚本。
将所需对比的乐器、插件、音轨设置成不同的双声道输出，例：插件1 = 1-2，插件2 = 3-4，插件3 = 5-6&amp;hellip;一共能接收8个双声道输入。
将 # of Input 设置成需要对比的双声道个数。
将 Switch Beat length 设置为自动切换通道的拍数（每n拍切换一次）。或者，使用 Millisecond Mode 并将其设置为自动切换的毫秒数。
选择切换模式：
Manual = 手动模式，点击0-9任意触发按钮（或对应小键盘数字）切换到对应双声道通道。
Sequential = 循序模式，输出通道将按照所设置的间隔自动切换到下一个双声道。
Random = 随机模式，输出通道将按照所设置的间隔自动切换到一个不同的随机双声道。
Guessing = 盲听模式，随机切换到一个双声道，并隐藏显示正播放的通道。点击0-9任意触发按钮显示正在播放的通道。
使用 Answer Displaying Time 来调制盲听模式中，显示答案至 返回到 “Guess”的时间。</description></item><item><title>Reaper JSFX: Maschine式音符重复器</title><link>https://RCJacH.github.io/cn/blog/midi-note-beat-repeater/</link><pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/midi-note-beat-repeater/</guid><description>下载MIDI Note Beat Repeater 然后放到资源文件目录下的Effects文件夹中。
官网下载地址
官网论坛地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器
更新： * v1.1 (2016-10-09)
+ 改名
+ 音符长度
+ 对齐格子
# 修改了音符准确性
说明： 这个脚本是用来模拟N.I.公司Maschine硬件上的Note Repeat(音符重复）功能的。我没用过硬件，所以可能在用法会有一些出入。但通过一些视频我发现这个功能在做HiHat方面很优秀，所以做了个脚本模拟一下。
使用方法如下： 这个脚本可以以两种方法使用：
作为轨道的输入FX。为所有的参数设置CC控制器，在第四个参数（开关）开启的状态下在你的MIDI键盘上按住一个（或多个）音，这个音就会以第一个参数（Rate）所设置的时值重复触发所按下的音符。第二个参数（Type）决定所选时值是普通、三连音还是附点音符。
作为普通FX插入轨道，排序至你的乐器之前。在钢琴卷帘中画出要出发的音符，用包络来控制参数。你也可以添加第二轨，用它录下第一轨的MIDI输出而得来实际重复的音符。这样你可以更细腻地去修改所生成的片段。
用Normal Type Lock参数（第三个）来做Drill类型的片段非常轻松。你可以试试把它设置成1/8，Type设置成Triplet，然后通过改变Rate来做出加花式的8分音符、16分音符、甚至32分音符三连音。这个参数能让你节省很多反复调节交替正常和三连音的时间。
Channel Pressure，通道触后，可以用来改变重复音符的力度：输出力度 = 通道触后。
看图。
输入： 过程： 输出：</description></item><item><title>小脚本 - 随机生成旋律属性</title><link>https://RCJacH.github.io/cn/blog/script-generating-melodic-properties/</link><pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/script-generating-melodic-properties/</guid><description>今天做了个小脚本，随机生成旋律方面的一些参数，这样每天可以练习一些旋律创作。
随机生成旋律属性脚本地址
点击左侧偏上的Run按钮来运行，会在右侧显示结果。
这个脚本生成一下几个参数：
Key = 调。目前定义为五线谱调号，以后可以考虑再生成调式/音阶参数。
Number of Points = 旋律线中转折点的数量，用来决定下面的旋律形状。
旋律形状：从音阶几级上行或下行到几级。
Prominent Interval = 旋律中比较重要的音程，或者重复比较多的音程。
Number of Bars = 小节数。
同时也做了个随机生成旋律属性脚本中文版
以下是今天做的（红色部分代表旋律转折点）
Key: D
Number of Points: 4
&amp;ndash;&amp;gt; Second
&amp;ndash;&amp;gt; Down to Third
&amp;ndash;&amp;gt; Up to Sixth
&amp;ndash;&amp;gt; Down to Seventh
Prominent Interval: perfect Fourth
Number of Bars: 4</description></item><item><title>REAPER JSFX - MIDI CC Eater CC屏蔽器</title><link>https://RCJacH.github.io/cn/blog/midi-cc-eater/</link><pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate><guid>https://RCJacH.github.io/cn/blog/midi-cc-eater/</guid><description>昨天有个朋友问道自己的MIDI键盘会随机自动发送一些CC控制器的信息，导致录音的时候很困扰。我的M-Audio Oxygen键盘用了几年也出现这个毛病了，而且每几个月会发送不同的CC信息哈哈，所以我在此分享一下之前用JS写的CC屏蔽的插件，叫CC Eater。
如图，这个插件只有一个选项：你想要屏蔽的CC。你也可以通过选择最顶项来屏蔽所有的CC。
具体使用方法就是，当你点击通道上的录音键之后，通道会出现一个IN FX的选项。如下图中橙色箭头所指位置。
IN FX指的是Input FX（输入效果），也就是在你的信号录入电脑之前所处理的效果。他会对你录入的MIDI/音频有不可恢复的影响（Destructive），所以除了这种特殊需求以外很少去运用INFX。录音的朋友们尽量不要用这个Input FX为录音加压缩防爆音什么的…如果你录入的音频是爆音的，通常在出声卡的时候已经爆音了，所以你在DAW添加什么效果都没有用。具体请参考这篇录音输入音量标准。
点击这里通过官网Stash下载MIDI CC Eater，然后放到资源文件目录下的Effects/MIDI文件夹内就可以在Reaper里调用了！</description></item></channel></rss>