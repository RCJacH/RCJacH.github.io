<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工作流程 on RCJacH</title><link>https://RCJacH.github.io/cn/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</link><description>Recent content in 工作流程 on RCJacH</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Sep 2021 22:25:43 +0800</lastBuildDate><atom:link href="https://RCJacH.github.io/cn/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>如何在REAPER内制作LRC格式的滚动歌词</title><link>https://RCJacH.github.io/cn/blog/lrc-maker/</link><pubDate>Tue, 21 Sep 2021 22:25:43 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/lrc-maker/</guid><description>前几天我终于在某云音乐让个人的全部歌曲+1了。 为了摸鱼制作更精准的滚动歌词，我写了一个自动生成LRC的脚本。 LRC格式说白了就是每行歌词前面多一个时间位置信息。
脚本去RCJacH的ReaPack库自取。
脚本名叫RCJacH_Generate LRC Lyrics and Export to Clipboard.lua。
如果你没有ReaPack， 也可以直接另保存脚本源文件。
这个脚本的使用方式如下：
创建一个专门写歌词的轨道，轨道名随意。 在每行歌词起始位置创建一个MIDI块儿，并把Take名改成该行歌词。 MIDI块儿长度暂时不影响输出。 如果想添加标签，可以在Take名最前面加一个#。 例#ar: 歌手会变成[ar: 歌手]。 这种标签是给播放器用的，但后来发现某云会自己生成部分标签。 如果你想让两行之间有空隙，请使用一个空名的MIDI块儿。 选择该歌词轨。 运行脚本。 该脚本会把这些歌词合并到一起，并拷贝结果至系统剪切板中，最后给你一个预览用的小弹窗。
看起来像这样。
如图中示范， 你通过选择不同轨道来生成不同语言的歌词。
额，该脚本不包含翻译功能。
用了这个脚本我们就可以把歌词滚动量化到拍子上了（跟我们的音乐一样）【微笑
以上。
PS. 动图中的歌曲是这首。</description></item><item><title>音源模板及常见问题</title><link>https://RCJacH.github.io/cn/blog/working-with-sample-library-templates/</link><pubDate>Wed, 09 Jun 2021 07:20:52 +0800</pubDate><guid>https://RCJacH.github.io/cn/blog/working-with-sample-library-templates/</guid><description>我在2019年的时候提出过并尝试过用REAPER来搭建音源服务器的概念， 后来断断续续有人询问搭建方式，所以打算记录下来供大家参考。
但这篇文章不是关于搭建的。
这篇讲的是音源服务器到底是什么， 并且讨论一下它跟其他模板比起来有什么优势和劣势。
为了理解该服务器的价值，我们需要了解一下媒体音乐制作人在工作中会遇到的几个问题。
使用音源时会遇到的问题 音源本身的问题 当代音源有个很大的问题－他们都很大。 众多的乐器组、完善的技法和丰富的麦克风摆位的代价就是庞大的体积、无数个控制器参数、耗时间的设置。
作为作曲类工作者，我们很幸运能有数十上百种不同的乐器为我们服务。 每个乐器还能通过音高、力度、奏法等方式来调整所发出的音色。 如果我们把几千种重奏组合及上万种伴奏织体加入到这个公式内， 光管弦乐团内的乐器就可以搭配出数不胜数的声音， 更别提那些让人着迷的民族及稀有乐器。
虽然小编制音乐近些年在媒体配乐中有复苏的迹象， 但甲方通常还是期待媒体音乐制作人有为大编制创作制作的能力。
没办法，大编制听起来就是爽，但随之而来的是更多的工作量。
除非你是John Williams或者Howard Shore级别， 大编制同期实录后还能赚一笔， 否则你还是得窝电脑面前老老实实地给虚拟乐器画包络去。
问题是虚拟乐器，俗称音源，用起来很不友好。
首先它们很贵－呃，我们都是良民，肯定是要买正版的啊，eventually。 其次每款音源的麦克风配置、输出音量及部分MIDI控制器的设置可能都不一样。 再次，为了模拟实录听感或者追求大气厚重的声音， 我们经常需要结合不同的音源来取长补短。 综合下来，统一设置很费时费力。
当然，你可以反驳说音源不需要再次设置，安装完直接用即可。 我之前也是这么想的，在浪费掉几百个小时后发现这方式不可取。 主要原因是，虽然开盖即用可以马上输出音乐内容， 但当你开始要求一些细节的时候就需要反复翻说明书查控制器设置、 校准输出音量、 尝试音源搭配、 平衡不同音源的麦克风音色差、 甚至需要模拟麦克风拾音及房间声。 这些额外但又必要的劳动会让音乐制作职业难乎为继。
有什么解决办法么？
有。花点时间做一个模板来减少实际工作中的干扰。
其实为虚拟乐团搭建一个大型模板已经成为业内的常规操作了。 这个模板会包含可能使用到的所有音源所有技法， 系统的命名方案， 用颜色区分的乐器组， 预配置的效果器和轨道路由， 以及各种意想不到的预设功能。
举个REAPER适用的例子：
storyteller的REAPER管弦超级大模板
实际工作流程中要么直接把这个模板保存为新工程， 然后把当前不用的轨道静音隐藏掉， 要么从模板中把需要的轨道拷到主工程内。
这种操作我称之为单一模板法。 它在二十年前就已成为业界标准操作了。 至今仍被许多活跃的媒体作曲家（例如Blakus和Mike Verta）所使用。 有些人甚至为他们的模板打造了硬件控制系统，咳汉斯季莫咳。
无论如何，单一模板法的确可以节省大量的初始配置时间， 但使用过程中反而会引入一些其他问题。
单一模板法的问题 单一模板法最大的问题还是他们很大，只不过这次指的是文件体积。
如果你是个REAPER用户， 你应该知道REAPER包含自动备份工程文件的功能。 鉴于丢失进度是准时交工最大的阻碍， 我把备份间隔设置为每5分钟保存一次。 这么基础的功能其他DAW估计也有。
那么问题来了，如果我们将所有东西都加载进一个工程内， BASE64字符串格式的插件设置会把工程文件撑到肥胖， 动不动就上百兆。 如果我们继续自动备份的话， 每小时产生的备份文件就需要一千多兆， 到最终工作完成时可能会上到几百个G。</description></item></channel></rss>