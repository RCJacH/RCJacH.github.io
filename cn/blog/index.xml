<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on RCJacH</title>
    <link>https://RCJacH.github.io/cn/blog/</link>
    <description>Recent content in Blogs on RCJacH</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>所有版权归RCJacH拥有。</copyright>
    <lastBuildDate>Sun, 01 Jul 2018 21:23:14 +0800</lastBuildDate>
    
	<atom:link href="https://RCJacH.github.io/cn/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>乐理系列教程 - 大调音阶</title>
      <link>https://RCJacH.github.io/cn/blog/rcmtheory/the-major-scale/</link>
      <pubDate>Sun, 01 Jul 2018 21:23:14 +0800</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcmtheory/the-major-scale/</guid>
      <description>定义 大调音阶是一组由七个不同音高组成的合集，这些音相互之间保持着固定的距离。
属性  大调音阶拥有七个不同音高组的音级，按照音高从低到高排序。 每一个音级有一个专属名称。 其中有两双距离为半音的音级，分别是3级与4级，7级与1级。其他临近音级之间距离为全音。  学习指南  大调音阶每个音高组仅出现一次，例C与C#不可同时出现，要么C与Db要么B#与C#。 关于音级的专属名称，暂时我们仅需要知道音阶的第一个音叫主音，例如Bb大调音阶的主音为Bb。其他音可以用音级数来表示，例如二级音、三级音。 为了写出大调音阶，我们先写下从主音开始的7个音高组，以Bb为例则为B C D E F G A。 然后观察每双相邻音级的关系并确认*仅三级至四级和七级至主音为半音关系*，其他相邻音级为全音关系。 若任何相邻音关系不符合以上结构，用变音记号去修正后者。一个常见规律为，若音阶主音为F或包含降号，则使用降号来修正音高关系，否则使用升号。  例子 以E大调音阶为例子。
我们列出从E开始的所有音高组：E F G A B C D，并确认仅三级至四级和七级至主音为半音关系，其他临近音级之间距离为全音。
从主音开始，我们发现E-F是个半音关系，但是我们在看1-2音级而非3-4音级，这里我们需要个全音，所以需要改变后者。为了让半音关系提升到全音关系，我们需要把F升上去，得到F#。所以F#是这个音阶的二级。
接下来我们观察一下F#与G - 二级音与三级音。我们知道F至G是个全音（中间包含一个音的距离），而因为他们不是E至F或者B至C，所以F#（F之上的一个音）到G是个半音。这不符合大调音阶的规律，我们需要把G升上去并得到G#，所以G#是E大调音阶的三级。
对比这个G#和下一个A音高组，也就是改音阶的第三个和第四个音。这两个音需要是半音关系，我们看看是否如此。G音高组到A音高组不属于E-F或B-C这两个半音组，所以他们之间是个全音关系，而由于我们刚才刚把G升至G#，所以G#至A是个半音关系。这符合大调音阶中三级与四级之间需为半音关系的规律，所以A是E大调音阶的四级音。
由此，我们可以用同样的逻辑来推导出E大调剩下的音高。
让我们看看另一个例子，Ab大调音阶。
首先列出从A开始的所有音高组：A B C D E F G。然后观察每双相邻音高。
从一级开始，A至B。因为他们*不是E至F或B至C，所以应该是全音*。但是，由于音阶的主音是Ab，比A还要低一个音，也就是说Ab与B之间的关系为*一个全音加上一个半音*，所以我们需要调整后者。为了让他们之间保持全音的关系，我们需要降低B的音高至Bb，所以Bb才是Ab大调音阶的二级。
从Bb往后看，下一个音高组是C。我们知道*B至C是个半音*，而我们在看音阶的二级与三级，需要个全音关系。但别忘了，我们刚才已经把B降至Bb，把他们之间的半音关系扩展至全音关系了，这符合大调音阶的规律。所以C正是Ab大调音阶的三级。
下一个音高组为D。大调音阶的*三级和四级之间需为半音关系*，而C至D是个全音，所以我们需要把D降至Db来获取音阶四级音。
接下来我们只需要回顾一下之前的操作，并应用在剩下的音级上就好了。例，Db至E的关系与第一组Ab至B的关系相同。
细说 大调音阶是西方乐理中关于音高关系的方面最重要的一个概念，因为所有其他的主题，无论是音程、和弦构造、还是功能和声，都是基于大调音阶的，所以内化所有的大调音阶很重要。
这篇文章提供了一个可以用逻辑推导大调音阶的方法，就像我们学的数学公式一样。我们需要先从结果中推导出公式，然后记住该公式才能更快地运用起来。记忆来自于理解、训练、和应用，不过不要担心，我们之后的课程中会有足够多的机会去使用此概念的。
很多乐理书上会在*音名*之后马上教*音程*（两个音之间的相关关系），可能因为音程涉及到的音会少一点。但是，若没有大调音阶的知识储备，学习音程可能只能依赖于数音数了。除此之外，很多书籍在讲音阶的时候会用五度圈或者调号来解释。虽然这两个概念很重要，很多人在学习过程中只会更迷茫，因为他们记不住五度圈看起来随机的顺序。为了学习大调音阶而学五度圈，为了学五度圈而学音程，而学音程有需要了解大调音阶&amp;hellip;这有点绕圈了。
所以我认为我们需要先学会建立大调音阶，并且把需要死记硬背的内容减到最少。本文其实只列出了三个重点和三个简单地推导步骤，纯逻辑，不需要记什么绕口令。
复习 该你啦！用本文所教的方法，以所有音高为主音推导对应的大调音阶 - 其中包含那些有等音关系的音高。注意*一些大调音阶会需要使用重升号和重降号*。</description>
    </item>
    
    <item>
      <title>乐理系列教程 - 音名</title>
      <link>https://RCJacH.github.io/cn/blog/rcmtheory/pitch-name/</link>
      <pubDate>Tue, 05 Jun 2018 18:37:19 +0800</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcmtheory/pitch-name/</guid>
      <description>音高定义 音高是人类对声音频率在对数刻度上的感受，也是用来判断声音高低的属性之一。
命名规则  共有七组重复的音高，我们称之为音高组，并用字母A B C D E F G标注。 在这些音高组之间，有另外五个没有直接用字母标注的音高。所以每次重复之间共有十二个不同的音高。 这些字母之间，只有E-F与B-C是相邻的（此关系名为半音），其他字母之间皆有一个音高（此关系名为全音）。 为了使用这些中间音，我们使用一种叫变音记号的名称修饰符，来改变音组字母所代表的音高。变音记号共有四种，可叠加使用，分别为：   降号 (b) = -1： 1
 升号 (#) = +1： 1
 重升号 (x) = +2： 1
 还原记号 = 0（去除其他变音记号的影响）： 1仅在五线谱中出现。
  
5. 正因为这些修饰符的存在，每一个音高可以有多个音名。同一个音高的不同名称被称为等音。
学习指南 命名规则  因历史原因，在音乐中这些字母的排列通常为C D E F G A B。 为了建立稳固的基础概念，我们在此仅使用十二平均律作为音律标准，即任意两个临近音之间的距离在对数刻度上是相等的。 学习这个规律最好的方法就是想象钢琴键盘。 区分*音高组*与*修饰符*对于理解音高相关的主题极其重要 - 无论是音程、音阶还是之后的对位法、和声学 - 理解之后能很快掌握之后的知识点。对于音高，其中一个思路是*把所有12个不同的音高根据他们之间的关系定义为0-11的数字，其中C = 0，D = 2等。*去获取数字为1的音高，也就是C与D之间的音高，我们可以从0加上1（升号），或者从2减去1（降号）。这样，我们只需要去记很少的信息，同时当碰到三重升号 或三重降号的时候 也不会一脸茫然。 等音不等于同一个音高。他是否为同一个音高取决于乐器的音律，例如木管和铜管通常是以谐音列为基础的音律，而非十二平均律。举个例子，重降D，代表从D音高组为基础-2的音高，其等音为C。但重降D依然属于D音高组的变异，而C则是C音高组的组员。  频率与音高 作为参考，一个音高的频率每次重复都会增加一倍。例如，若A音高的频率为440Hz，当我们经过BCDEFG以及期间的5个额外音高后，下一个A的音高则是两倍的频率：880Hz。再下一个A则为1760Hz。同时因为共有12个不同的音高，每增加半音，我们用基础赫兹乘以2的12次方根。 上图中，当音高上升时，半音之间的距离也在增加。为了让任意频段的相邻音之间保持同样距离，我们需要使用对数刻度。 细说 虽然音名属于乐理中最基础的概念，*它是那些能主动设计音乐的人与那些只能被动复现音乐的人最大的区别。*有很多乐理基础书籍、文章、甚至插件都很注重十二平均律里的十二个音，这个虽然对和声染色或序列音乐很有帮助，但并没有讲清楚功能音乐中每个音符之间的关系。有一些人甚至鼓励死记硬背，完全没有意识到我们对知识的深刻记忆来自于理解与经验，熟练只是这些努力的显性结果。</description>
    </item>
    
    <item>
      <title>乐理系列教程 - 前言及目录</title>
      <link>https://RCJacH.github.io/cn/blog/rcmtheory/toc/</link>
      <pubDate>Sat, 26 May 2018 01:53:16 +0800</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcmtheory/toc/</guid>
      <description> 前言 这篇为了宣布我将发布一系列乐理教程，包含乐理基础、和声学、对位法、及其它我目前还没想好的主题。这一页将作为系列的前言及目录，每出一篇新文章后会及时更新链接。
作为前言，应该写一些东西哈，但我写完英文版后发现一些梗不好直译，所以只能照着轮廓重写一遍了。此篇大概讲一下为什么在当今乐理书与文章已经层出不穷的环境下，我还要坚持写此类教学文章。
我观察到的是，虽然市场上有一些优秀的学习资料，大部分乐理教学系列都挺尴尬的。他们通常会遇到以下两个问题之一。
第一个问题出现在各类实体或网络书籍中。其问题核心是：书写出来通常是用来发行出售的！无论是卖给刚被家长拉着去考级的孩子们还是为了乐理课被迫买教材的音乐本科生们，作者都需要考虑目标读者群体是否愿意花钱去买。这决定了书籍内容的内容及表达方式。例如，读者在某些程度上会以页数来评判一本书的定价，三百页的书应该比三十页的更值钱之类的。为了让自己的作品卖更多钱，多数作者愿意花更多时间码字儿，把简单的感念复杂化，把一个主题拆开了塞各种练习题之类的。这样一些读者会认为：“他说的我都看不懂，应该是本好书！” 看这种书的确也能学到东西，但一个月能学下来的内容要花一两年（而且可能学得越辛苦越觉得作者水平高还觉得自己笨）。何苦呢。
第二个问题存在于网络上的各种乐理类文章。网络年代的优势是我们可以主动去寻找学习的主题、快速理解该题材的基础、并能理智地去选择是否要去深入研究。一个优秀的案例如维基百科，只不过对于音乐理论来讲，它的内容更多是关于某个话题的知识，而非针对其能力的训练。蓝色的什么百科就不用提了，好多内容都是错的、有误导性的、甚至内嵌广告。wiki以外跟乐理相关的网络文章、博客，大部分分为两类：深入探索某知识点或拉流量的白水文。前者是非常优秀的学习资源，不过更针对于有一定基础的读者群众；后者通常只是把常见书上的内容概括了一下，目的是让读者在不需要理解的情况下能够顺利复制文章内容。这些文章作为消磨时间而用可能还有一些效果，但若真心想解锁某些技能可能就不太合适了。
P.S. 国内当代还有一类：围绕话题抖段子。看之前很空虚，看完更空虚。当你觉得看完这些言不及义的文章后学不到什么内容时，人家还会反驳反正当代中国人都不想学习只想娱乐。wtf
我认为学习任何概念应该从非常明确的定义开始，然后再引入例子及解释。所以我开始写这个系列，重点为学习、理解、应用，把那些正史野史的故事、抖机灵的段子、或其他一些不可言喻的思想留给其他材料去讲。
我在此真心希望这系列的读者能够享受迅速学习、理解的过程。

目录  前言
 音乐基础
2.1. 音名
2.2. 大调音阶
2.3. 音程
 和声
 对位法  </description>
    </item>
    
    <item>
      <title>REAPER - 原创JSFX小游戏RCMShip Perfect Pitch</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-rcmship-perfect-pitch/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-rcmship-perfect-pitch/</guid>
      <description>RCMShip Perfect Pitch下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器RCJacH ReaPack Repository
如何使用ReaPack？
简介 RCMShip （MShip代表musicianship，即音乐修养、视唱练耳）Perfect Pitch是一款包含自适应随机算法的原创JSFX游戏，用来练习绝对音感的能力。
游戏方式  点击 START后，游戏将播放一个固定音高。 猜测该音高的音名并点击相关按钮。 回答后，游戏将将显示正确答案，若答错也会显示所选答案。 点击 Next 将继续下一轮。  特色 自适应 当玩家做出回答后，回答的正确与否将影响当前所播放的音出现的几率。
可选性 点击Setup将转至音符选择页面，在此你可以手动或随机选择游戏所包含的音高，限制游戏难度或者增加变化。
可配置 点击Config按钮切换到设置页面，可以设置一些基本参数，例如音量、音符长度、播放的八度和八度跨越等。也可以切换至MIDI输出模式，用采样播放器或者其他合成器作为音源。
进阶介绍 理论 来自404（wiki）：&amp;rdquo;Absolute pitch (AP), widely referred to as perfect pitch, is a rare auditory phenomenon characterized by the ability of a person to identify or re-create a given musical note without the benefit of a reference tone.&amp;rdquo; 绝对音感是一个罕见的听觉现象，指的是一个人有能力在没有参考音高的情况下识别或重现一个给定的音符音高。</description>
    </item>
    
    <item>
      <title>关于棚改隔音</title>
      <link>https://RCJacH.github.io/cn/blog/sound-insulation/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/sound-insulation/</guid>
      <description>前些日子经过一位大佬的点拨，以及几十篇GS、Johnlsayers帖子和Ethan Winer、RealTraps团队这种建筑师官网文章，稍微了解了一下符合录音功能的隔音与吸音，并整理出以下几段笔记。越挖越深，一步走错万丈深渊，因此来请大家一起入坑。
此文章仅为个人观点，若有任何讲解不正确的地方，请大佬们指出，看情况修正。
隔音与吸音是两个相关但并非互相替换的概念。很遗憾，*很多装修相关的书和文章都在瞎写，把这两个概念混淆在一起，甚至两个词换着用*，有点不负责任。吸音主要功能是提高室内的声学环境 – 减少室内声波反射 – 无法阻止声音进出房间，虽然减少声音反射的确对隔音有一点点帮助。
隔音需要注意的有以下几点，按重要性排列：
1，Airtight密封性。 声音能渗入任何空气流通的地方，*3米长的墙根处一个两毫米宽的缝隙在隔音方面相当于墙上有个大约200平方毫米的窟窿*。很简单的概念，实际操作却很困难。毕竟我们想做的是棚改，是要花大量时间在室内工作的，如果空气不流通的话，人怎样呼吸呢？新风？新风也需要管道呐，而且新风也是有噪音的（空气流动的声音）！混音时可能影响不大，录音时照样要关掉的。当然除非你房间够大，不过房间大的话，人数上去对送风量的要求也会提升…
除去新风管道，还有别的东西也会在墙上打洞，例如插座暗盒、电线管、暖气管、空调管道。这些东西必要的，所以实际保证房间密封性是相对来说比较困难的。哦，别忘了一个房间最大的两个开口：门（shen）窗（keng）！怎么解决呢？问毛爷爷，红色的。
2，Mass质量（或 体积 x 密度）。 这个道理也简单，隔音效果在同样体积情况下越重越好，同样密度下体积越大越好。而且是木桶原理，也就是说假设你花了很多钱建了个很厚、密度很高、隔音指数很高的墙，但是门不隔音&amp;hellip;花在墙上的钱就白费了。
关于建筑材料密度，我找到了这么一个表并企图翻译了一下，可以当作参考：
   材料 kg/m³ lbs/ft³     亚克力玻璃 Acrylic Glass 1180.0 kg/m³ 73.66 lb/ft³   普通红砖 Brick, common red 1922.0 kg/m³ 119.99 lb/ft³   火泥砖 Brick, fire clay 2403.0 kg/m³ 150.01 lb/ft³   灌胶水泥 Cement (foundation) 2499.0 kg/m³ 156.01 lb/ft³   硬质刨花板 Chip board, hard 750.</description>
    </item>
    
    <item>
      <title>RCJacH - 不规则世界</title>
      <link>https://RCJacH.github.io/cn/blog/rcjach-anomaly-world/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcjach-anomaly-world/</guid>
      <description>不规则世界 Anomaly World - Feat. Euphia 作曲 : RCJacH
作词 : Euphia
棕色瞳孔里看见
乞力马扎罗山的雪
冻结格林尼治时间
蓝色石头坠落不见
十一维度画面
谁在冷静求解
原地踏步的人多危险
穿过这道光圈
深渊还是桃源
为何不睁开眼就以为那是昙花一现
穿梭人间炊烟
我不想再冬眠
颠覆空间 画出一道抛物线
看见不规则世界出现
一切开始从零改变
黑天鹅太常见
什么规则对我没差别
看见不规则世界出现
迷恋这一刻灵光闪现
悬念是多项选
忽然间我爱上冒险
忽然间我爱上冒险
忽然间
看不出差别的表面美化
你真的流连忘返吗
面对真实虚假
透过倔强
抑制不住的渴望
和你同样
和你同样想
穿过这道光圈
深渊还是桃源
为何不睁开眼就以为那是昙花一现
穿梭人间炊烟
我不想再冬眠
颠覆空间 画出一道抛物线
看见不规则世界出现
一切开始从零改变
黑天鹅太常见
什么规则对我没差别
看见不规则世界出现
迷恋这一刻灵光闪现
悬念是多项选
忽然间我爱上冒险
看见不规则世界出现
一切开始从零改变
黑天鹅太常见
什么规则对我没差别
看见不规则世界出现
迷恋这一刻灵光闪现
悬念是多项选
忽然间我爱上冒险
忽然间我爱上冒险
忽然间我爱上</description>
    </item>
    
    <item>
      <title>REAPER信号流</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-signal-flow/</link>
      <pubDate>Fri, 23 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-signal-flow/</guid>
      <description>什么是信号流？
在数字音频制作领域，信号流指的是信号（例如音频或MIDI）是如何经过DAW中每一层运算的。
因为我们在实际使用中常常会需要建立路由，无论是简单的信号发送、搭建模块合成器、还是建立使用Parameter Modulation的多轨模板，清晰地了解信号在DAW中的路径以及运算顺序会有非常大的帮助。

所以我画了以下这张图。
排除模拟输入(Input)以及输出(Output)，Reaper总共有四个信号处理阶段：Take（层），Item（块），Track（轨），Master（总线）。每一个阶段在音频运算方面是完全一样的（单纯的加法），唯一的区别只是使用方式以而已。

以下则是一张包含包络的细节图。
注释：
Take Trim = 层音量衰减（主页面块儿上&amp;rdquo;边&amp;rdquo;往下拽的衰减）。

另外几点
 我们知道REAPER只有一种万能轨道。
 信号发送到另一轨的思路与块的信号输入至所包含轨性质是一样的。
 母轨道(Folder Track)就像微型总线一样，把所有子轨道的信号加在一块儿再处理。
 音频/MIDI通道是同路由上平行的信号流。
 音频只会相加同通道的信号。
 音量推子、Trim包络、音量包络三者可以同时使用，也就是说可以同时有三层音量调整的方法（平衡、段落、微调之类的）。
 监听FX（Monitor FX）在音频渲染时是旁通的。
  </description>
    </item>
    
    <item>
      <title>Tone Sweep – 原创JSFX电鼓合成器</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-tone-sweep/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-tone-sweep/</guid>
      <description>Tone Sweep下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器

介绍： Tone Sweep是一款能生成一个音高变化（扫频）的单音电鼓合成器。主要用于设计电子音乐中使用的鼓，例如低鼓，军鼓，铜鼓，以及音效。

用法：  设置起始音高（StartingNote）以及目标音高（EndingNote）。
 通过拖动图形的X和Y轴按需求设置扫频的曲线和时长。
 使用Envelope图形以及下方参数设计音量包络。
 输入MIDI或者用MIDI键盘输入音符，播放一下。
 阅读下方更具体的参数解说。
  
控制器类别： 通用 Ctrl+鼠标左键重置至默认数值。
推子 可以通过直接点击推子或者按住鼠标左键后左右拖动来设置一个数值。拖动时可按下Shift或Alt键微调：Shift改变0.01，Alt改变1。注意，要先松开鼠标左键，后松开修饰键，否则数值将被设置为鼠标位置对应的数值。
选框 点击改变改参数的开启状态。
拖拽框 点击按住鼠标左键并上下拖动鼠标来改变数值，拖动时按住Shift可微调。
图形 点击按住鼠标左键并拖动鼠标来开遍数值，拖动时按住Shift可微调。X轴和Y轴可能分别影响两个不同的参数。

界面参数说明： 概述页面 这个是插入JSFX后显示的第一个页面，包含了此合成器的两个最主要的元素，音高扫频和音量包络。
任何图形的X轴参数决定了其长度，Y轴参数决定了曲线的坡度。音量包络图形则包含三个不同的部分，Attack，Hold，和Decay。每个部分有他自己的X和Y轴。音量包络图形下方有几个拖拽框可以改变曲线形状以及时长。
在整个界面最低端有一个不可操作的波形图样，作为视觉参考。

音高页面 第二个页面是音高页面，包含了此合成器中所有与音高、频率有关的参数。
Pitch 音高 A4：这个参数是音高标准，指的是A4（MIDI音高69）这个音的频率，默认为440。
Starting Note：扫频的起始音高。
Ending Note：扫频的目标音高，可以同起始音高一样，或高于起始音高。
Fine Tune：这两个操作将改变对应音高的音分，即百分之一个半音。
Sweep 扫频 Time：这个指的是扫频，从起始音高到目标音高，总共需要花的时长（毫秒）。
Curve &amp;amp; Multiplier：这两个参数决定了扫频的曲线坡度。
Shape：这个参数决定了曲线的形状。
此页面右下角的*音高曲线图形*与概述页面中的相同。

音量包络页面 此页面包含了所有对音量包络有影响的参数。此合成器，作为电鼓合成器，音量包络只有三个阶段，Attack（起音）、Hold（停留)、Decay（衰减），或AHD。
*起音*阶段指的是，当接收到MIDI音符触发信息后，包络值从0%到达100%的阶段；*停留*阶段指的是当达到100%后所持续的时间；经过停留阶段，包络值开始从100%*衰减*至0%
起音和衰减阶段的曲线控制原理与扫频曲线原理相同。
音量包络图形与概括页面的图形一样。

波形页面 波形页面所包含的是那些会改变输出信号音色的参数。</description>
    </item>
    
    <item>
      <title>音乐创作之 全排列 脚本</title>
      <link>https://RCJacH.github.io/cn/blog/script-list-permutation/</link>
      <pubDate>Mon, 13 Feb 2017 20:38:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/script-list-permutation/</guid>
      <description>为了让音乐创作之全排列技巧变得更直观，我做了一个简单的脚本。
全排列脚本地址
 这个脚本按着输入的音符（或者字符）以及所需要的变化数量，随机生成几个修饰方式以及相应的全排列。
使用方法：  第一行的变量为音程修饰的总数，改成0则生成无修饰的全排列。
 第二行的大括号内为所使用的字符，第一项和最后一项是范围之外的临时变化。中间可以输入任意数量的字符。默认为C大调的1 2 3 4（以及作为临时变化的7和5）
 设置好了之后点击上方的Run，就可以在低下的结果栏里显示出来所有的排列。
  此脚本可以作为一个学习、检查、或者激发灵感的工具，真正弹奏的话还是建议把这个全排列技术练成本能。</description>
    </item>
    
    <item>
      <title>音乐创作之 全排列 技巧</title>
      <link>https://RCJacH.github.io/cn/blog/compositional-permutation/</link>
      <pubDate>Mon, 13 Feb 2017 20:37:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/compositional-permutation/</guid>
      <description>全排列是一个组合数学概念，简单来说就是因为1+2=2+1，所以1与2之和的组合有两个（组合总数公式为n!）。
在音乐即兴、作曲中，全排列是一个发展主题的好工具。我们可以通过使用全排列技巧来扩展一个简短的音乐动机，避免不断构思新的无关联的动机，这样能让音乐作品更统一，更有逻辑。在我们即兴课上，全排列是最基础的一个练习。每个人被要求背下四位数的全排列，把它变成本能，并有能力随时随地调取这个列表。
四位数的全排列表如下（共4!=24组）：
           1 2 3 4 2 1 3 4 3 1 2 4 4 1 2 3   1 2 4 3 2 1 4 3 3 1 4 2 4 1 3 2   1 3 2 4 2 3 1 4 3 2 1 4 4 2 1 3   1 3 4 2 2 3 4 1 3 2 4 1 4 2 3 1   1 4 2 3 2 4 1 3 3 4 1 2 4 3 1 2   1 4 3 2 2 4 3 1 3 4 2 1 4 3 2 1    很多人会觉得这个表格很熟悉，毕竟吉他乐手练指法的时候会用到它（每个数字代表一个手指）。在指法之外，如果我们把每个数字代入一个音符、节奏、和弦、乐句、力度或者任何音乐概念的话，我们可以马上生成24种相关的动机可能性任我们挑选。</description>
    </item>
    
    <item>
      <title>Reaper字符串快捷键系统：Vimper Solo</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-vimper-solo/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-vimper-solo/</guid>
      <description>当我们开始挖掘REAPER内隐藏着的几千个操作（Action），并且随着ReaPack的成长不断添加新的用户自制脚本与扩展时，我们会发现当我们需要自定义快捷键时，能用到的键位越来越少。而为了充分利用现有的字母、数字、以及符号键，我们通常需要加上各种如Ctrl，Alt甚至Win的修饰键进行各种高难度的键位组合，而且经常过几天可能就会忘掉一大半。
为了避免这种尴尬，我做了一个按组归类快捷键的脚本。它是依照VIM文本编辑器快捷键的理念，通过一串字符触发快捷键的。
点击这里下载Vimper Solo。
通过这个脚本，我们不需要去记各种修饰键，只需按组激发对应的键位就好了。例如，在这个脚本内，同一个m键可以根据不同的分组静音轨道、块或层，但在REAPER里，我们得去想到三个不同的修饰键组合来触发这三个不同的功能。有的时候由于记不住某个操作是要按Shift还是要按Ctrl还是Ctrl+Shift需要反复去试，浪费很多时间。
使用方法：  解压后把整个文件夹放到资源目录的Script文件夹内，然后在Reaper的Action List中加载RCJacH_Vimper Solo并为其设置一个快捷键（我用的是分号;）。
 触发脚本，根据GUI窗口提示进入不同的分组并触发不同的操作。
 使用Backspace退格键返回上一层菜单。
 也可以在Action List中加载RCJacH_Vimper Solo Repeat Action来反复触发上一次触发操作。
  在Bindings.lua文件里，可以依照现有项设置新的快捷键或者修改现有的快捷键。
格式：
分组= {
NAME = “分组”,
快捷键= {CommandID, 所显示的名称},
}
*注意，任何分组必须得包含NAME= “名称”一项，否则识别不到。
**分组可以有无数层。
***如果添加新的总分组，得在最底下的return{}里添加。
****快捷键目前区分大小写。
*****显示名称可以使用中文。</description>
    </item>
    
    <item>
      <title>Reaper JSFX: NoiseBuzz噪音生成器</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-noisebuzz/</link>
      <pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-noisebuzz/</guid>
      <description>我们在混音或者声音设计的时候，经常需要在现有的军鼓上面叠一层噪音，这样能让军鼓听起来更满一点。为此，我们可能需要插入一个噪音生成器、一个门限再加上各种滤波器。我觉得调制起来很麻烦所以就把这三个放在了一起，做成了JS插件。这个插件会在输入音频信号超过Threshold阈值后触发动态噪音信号（噪音音量与输入音量有直接关系），并可以通过选项来调制这个噪音的动态包络以及频段限制。
这个插件可以用于军鼓轨道（通常是军鼓bottom mic），或者放在Overhead、Room、甚至混响轨来添加一些房间的沙沙声。甚至可以叠在HiHat轨以及Supersaw合成器轨。随意玩。
 v1.3 (2018-03-08)
 Brown Noise Type. MIDI Trigger.
Fixed sustain. Renamed to RCNoiseBuzz since the update broke backward compatibility.  v1.2 (2017-04-08)
 Width Control.  v1.1 (2017-03-11)
 Decay &amp;amp; Sustain Control.  v1.0a (2017-01-31)
Renamed to NoiseBuzz. v1.0 (2017-01-22)
 Initial Release.   下载地址： RCNoiseBuzz官网下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器</description>
    </item>
    
    <item>
      <title>REAPER JSFX - AB Comparison 8路信号对比脚本</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-ab-comparison/</link>
      <pubDate>Fri, 20 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-ab-comparison/</guid>
      <description>昨天做了个JSFX小脚本：AB Comparison。目的是更方便的监听和对比不同信号（比如说不同插件、不同轨道）。
这个脚本可以根据所设置的节拍或者微秒长度，自动切换到不同的双声道通道。同时还包含一个盲听模式。
使用方法：  在任意音轨上放置 AB Comparison 这个JS脚本。
 将所需对比的乐器、插件、音轨设置成不同的双声道输出，例：插件1 = 1-2，插件2 = 3-4，插件3 = 5-6&amp;hellip;一共能接收8个双声道输入。
 将 # of Input 设置成需要对比的双声道个数。
 将 Switch Beat length 设置为自动切换通道的拍数（每n拍切换一次）。或者，使用 Millisecond Mode 并将其设置为自动切换的毫秒数。
 选择切换模式：
   Manual = 手动模式，点击0-9任意触发按钮（或对应小键盘数字）切换到对应双声道通道。
 Sequential = 循序模式，输出通道将按照所设置的间隔自动切换到下一个双声道。
 Random = 随机模式，输出通道将按照所设置的间隔自动切换到一个不同的随机双声道。
 Guessing = 盲听模式，随机切换到一个双声道，并隐藏显示正播放的通道。点击0-9任意触发按钮显示正在播放的通道。
  使用 Answer Displaying Time 来调制盲听模式中，显示答案至 返回到 “Guess”的时间。
Output Channel Display 显示正在播放的通道。循序模式和随机模式内，点击0-9任意触发按钮返回至手动模式，并切换到该通道。
下载地址： AB Comparison官网下载地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器</description>
    </item>
    
    <item>
      <title>REAPER网格</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-grid-system/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-grid-system/</guid>
      <description>当我们在创作任何非散拍音乐的时候，通常需要让音符或音频在某些程度上对齐节拍的细分（subdivision）来保证节奏的稳定性。这个时候，在DAW里，我们所用到的是节拍网格（Grid）。
它长这个样子
或者这个样子
我们通常会把网格设置成常用的音符长度，例如八分音符、十六分音符等二的倍数(2 * 2^n)，或者三连音的倍数(3 * 2^n)。可是当我们需要稍微不常见的(例如五连音、七连音、九连音)或者不规则的细分时，这些选项就不太够用了。
作为REAPER用户，我们在这块儿还是比较幸运啦，因为REAPER网格不是固定的选项而是直接提取用户输入。这样我们则不需要局限于传统固定的格子，反而可以尝试一些不寻常的搭配。
首先，REAPER的格子设置可以分别在这两个地方找到。
MIDI界面的底端
以及主界面的吸附/格子设置（Snap/Grid Settings）
我们可以在这个设置中直接输入所需的分数来设置网格的规模。
算法则是：网格大小 = 全音符 / 分母 * 分子
注：全音符是四个四分音符，所以如果用非4/4的节奏谱号可能会比较难理解。
注2：每个小节重新开始计算。
通过简单的计算我们就可以得出
全音符九连音 = 1&amp;frasl;9
四分音符七连音 = 1/(7*4)=1&amp;frasl;28
或者试一试不规律的组合，例如
5&amp;frasl;27
此外，利用这种设置可以开启比较不寻常的节奏分解，例如把三拍分成五个音
3&amp;frasl;20
我用不同组合的五连音做了个短Demo。
 </description>
    </item>
    
    <item>
      <title>REAPER工具栏系统</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-toolbar-system/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-toolbar-system/</guid>
      <description>我最近发现了一个很有意思并且非常有效的使用Reaper自定义工具栏的方法。

在其他DAW里，工具栏通常是固定不变的，我们最多只能移动或者隐藏它们。
但是在Reaper里，因为我们很幸运地拥有不少可自定义的工具栏，并且能在工具栏内添加任何操作，可能过不了多久我们的屏幕就变成这样了：
可能有些人会觉得这样排列工具栏在做大项目里是必要的，不过要在这么多图标里找到需要的操作还是要花一些时间的。
我们不如在单块面板上使用多个工具栏，然后把他们都连成一整个工具栏系统！

我现在的界面是这样的：

作为参考，以下是我对工具栏系统的组成思路。
我现在在主界面以及钢琴卷界面设置了两个层次的工具栏。
最上层的工具栏所包含的操作拥有两个目的。一是触发工程范围的事件，比如说重设MIDI设备、打开各种窗口（sws自动配色 或 heda的Note Reader）。二是作为状态栏，显示一些用快捷键触发的开关性的动作，如节拍器、预卷、吸附网格、包络跟随块等。
旁边的工具栏包含日常常用的操作，分为五类：
音轨 块 音频 包络 插件 
用来切换的命令是这个：
同样功能的包含工具栏2至工具栏16，以及相关的MIDI工具栏。
这样，我们可以在母工具栏里设置一系列切换到子工具栏的操作，并在所有的子工具栏里加上一个回到母工具栏的操作。
我的钢琴卷工具栏也是用同样的方法设置的，只不过状态栏和操作栏全部放到了同一个横向面板中。
状态 选择 音符 CC 呵呵，我讨厌CC
和弦 （为了迅速输入和弦并且修改声部排列）
当然，以上的截图并非是这个系统的最终状态。我会慢慢更新并完善它：添加一些常用的操作，并删除一些不常用的。不过，这个系统理念能够更有效的利用、整理、分类Reaper的工具栏，节省我们屏幕中宝贵的显示空间。</description>
    </item>
    
    <item>
      <title>Reaper JSFX: Maschine式音符重复器</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-midi-note-beat-repeater/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-midi-note-beat-repeater/</guid>
      <description> 下载MIDI Note Beat Repeater 然后放到资源文件目录下的Effects文件夹中。
官网下载地址
官网论坛地址
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器
更新： * v1.1 (2016-10-09)
+ 改名
+ 音符长度
+ 对齐格子
# 修改了音符准确性
  说明： 这个脚本是用来模拟N.I.公司Maschine硬件上的Note Repeat(音符重复）功能的。我没用过硬件，所以可能在用法会有一些出入。但通过一些视频我发现这个功能在做HiHat方面很优秀，所以做了个脚本模拟一下。
使用方法如下： 这个脚本可以以两种方法使用：
 作为轨道的输入FX。为所有的参数设置CC控制器，在第四个参数（开关）开启的状态下在你的MIDI键盘上按住一个（或多个）音，这个音就会以第一个参数（Rate）所设置的时值重复触发所按下的音符。第二个参数（Type）决定所选时值是普通、三连音还是附点音符。
 作为普通FX插入轨道，排序至你的乐器之前。在钢琴卷帘中画出要出发的音符，用包络来控制参数。你也可以添加第二轨，用它录下第一轨的MIDI输出而得来实际重复的音符。这样你可以更细腻地去修改所生成的片段。
  用Normal Type Lock参数（第三个）来做Drill类型的片段非常轻松。你可以试试把它设置成1/8，Type设置成Triplet，然后通过改变Rate来做出加花式的8分音符、16分音符、甚至32分音符三连音。这个参数能让你节省很多反复调节交替正常和三连音的时间。
Channel Pressure，通道触后，可以用来改变重复音符的力度：输出力度 = 通道触后。
看图。
输入： 过程： 输出： </description>
    </item>
    
    <item>
      <title>小脚本 - 随机生成旋律属性</title>
      <link>https://RCJacH.github.io/cn/blog/script-generating-melodic-properties/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/script-generating-melodic-properties/</guid>
      <description>今天做了个小脚本，随机生成旋律方面的一些参数，这样每天可以练习一些旋律创作。
随机生成旋律属性脚本地址
点击左侧偏上的Run按钮来运行，会在右侧显示结果。
这个脚本生成一下几个参数：
Key = 调。目前定义为五线谱调号，以后可以考虑再生成调式/音阶参数。
Number of Points = 旋律线中转折点的数量，用来决定下面的旋律形状。
*旋律形状*：从音阶几级上行或下行到几级。
Prominent Interval = 旋律中比较重要的音程，或者重复比较多的音程。
Number of Bars = 小节数。
同时也做了个随机生成旋律属性脚本中文版
以下是今天做的（红色部分代表旋律转折点）
Key: D
Number of Points: 4
&amp;ndash;&amp;gt; Second
&amp;ndash;&amp;gt; Down to Third
&amp;ndash;&amp;gt; Up to Sixth
&amp;ndash;&amp;gt; Down to Seventh
Prominent Interval: perfect Fourth
Number of Bars: 4</description>
    </item>
    
    <item>
      <title>RCJacH - 在下坂本有何贵干登场曲 吉他版 乐谱</title>
      <link>https://RCJacH.github.io/cn/blog/rcjach-sakamoto-desu-ga-score/</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcjach-sakamoto-desu-ga-score/</guid>
      <description>乐谱地址：（注意调弦是Drop D：DADGBE）
在下坂本有何贵干 吉他版 乐谱 度盘 密码: hw67
在下坂本有何贵干 吉他版 乐谱 Github
音频地址：
在下坂本有何贵干 吉他版 音频 网易云音乐
坂本ですが? Guitar Cover SoundCloud
视频地址：
在下坂本有何贵干 吉他版 视频 Acfun
在下坂本有何贵干 吉他版 视频 Bilibili
坂本ですが? Guitar Cover YouTube</description>
    </item>
    
    <item>
      <title>RCJacH - TV动画《在下坂本有何贵干》 登场曲/ TVアニメ「坂本ですが?」入場曲【吉他版】</title>
      <link>https://RCJacH.github.io/cn/blog/rcjach-sakamoto-desu-ga/</link>
      <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcjach-sakamoto-desu-ga/</guid>
      <description>今天坂本完结撒花，为此献上登场曲一首。
设备：
Fender HighWay One Telecaster (Lindy Fralin Pickups）
Yamaha THR10
REAPER
下周放谱子。</description>
    </item>
    
    <item>
      <title>如何寻找Reaper资源文件目录</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-resource-folder/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-resource-folder/</guid>
      <description>在使用REAPER的过程中，无论是在添加主题、脚本、插件、还是轨道/工程模板的时候，都需要把相应的文件放到一个叫做资源文件目录的文件夹中。那么这个文件夹到底在哪儿呢？以下提供几个能找到它的方法。

最直接的方式：我们打开Reaper之后，在其默认菜单里的Option（选项）中，倒数第五个命令是Show REAPER resource path in explorer/finder&amp;hellip;（在Explorer/Finder中打开REAPER资源文件目录…），点击之后就会在系统默认的文件浏览器中打开该目录了。

以上介绍的方式通常能解决大部分寻找资源文件目录的需求， 可实际上我们可能会遇到特殊的情况，需要通过手动的方式去寻找这个资源文件目录。方法如下。
在windows系统下，不同的系统版本中的地址稍有不同，分别是：
Win XP与之前的系统：
C:\Documents andSettings(username)\Application Data\REAPER
Win 7与之后的系统：
C:\USERS&amp;lt;username&amp;gt;\AppData\Roaming\REAPER

以上地址，把带括号替换成你的电脑用户名，直接粘贴至文件浏览器的地址栏里，点击前往或按Enter键就到达了。更便捷的链接是这个：
%appdata%\REAPER
同样直接粘贴至文件浏览器的地址栏里就可以了。

Mac OS 系统下，该地址为：
/Users/ /Library/Application Support/REAPER
同样，把替换成你的电脑用户名即可。

此外，REAPER对于资源文件目录的优先值为：先搜索主程序所在的文件夹，如果没有资源文件，再搜索系统默认的资源文件地址（之前所介绍的）。所以如果找不到相关的资源，不放也查看一下Reaper运行文件所在的地址吧。</description>
    </item>
    
    <item>
      <title>Reaper：工程策划音轨模板</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-track-template-layout-rsgc/</link>
      <pubDate>Sat, 18 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-track-template-layout-rsgc/</guid>
      <description>今天我来跟大家分享一个REAPER工程策划的音轨模板。这个模板包含了四条音轨，RSGC，分别代表：参考Reference，段落Sections，律动Grooves以及和弦Chords。这四条音轨能够为工程建立一个大体的轮廓，帮助我们理清思路，尤其在没有太多时间凭感觉尝试新东西的时候，能够让我们在制作的环节内节省很多被浪费掉的时间。当然我们也可以手动输入这些内容（可能过去就是这么做的），但是做成模板之后能减少很多重复的操作，大部分内容直接鼠标拖拉复制就好了。
你可以这里下载RSGC英文版或者RSGC中文版。
下载之后，解压放到REAPER资源文件目录内的Track Templates文件夹，之后直接在主窗口左半栏中，点击右键出现的Insert Track From Template或中译的通过模板插入新的轨道选项里，选择Layout RSGC就能加载了。

看一下截图：
为了不让这四轨干扰我们正常的制作流程，我把它们从调音台界面隐藏了，同时我也禁用了它们的MIDI以及音频的输入。

那么我们怎么使用这个模板呢？请容我解释一下模板中每一轨的功能。
参考轨： 我们可以直接把参考的音频拖到这个音轨中，无论是该风格的制作/混音/母带参考品还是歌曲的小样版本。
为了针对可能出现的频段监听需求，我在效果链中放个了ReaEQ，当高切低切用，并且把频率参数设置成了轨道控制钮。
段落轨： 这个音轨是用来排列歌曲不同段落的。这个方面我发现用Reaper的空白块(Empty Item)功能会比用各种标记（Markers）或者区域（Regions）要更便捷。同时我们还能直接选中需要导出的段落，使用&amp;ldquo;Loop points: Set Loop Points to Items&amp;rdquo;这个操作（Actions），然后在导出界面右上角的Bounds选项里选择&amp;ldquo;Time Selection&amp;rdquo;或选区。
此模板内包含了所有我能想到的段落名称作为一个个单独的空白块。这样我们可以直接加载模板，利用现有的块来拼出歌曲的轮廓，然后删掉剩下的那些不需要的块。
在此之上，我用ReaMIDIControl加了一轨没有任何实际影响的包络，命名为Energy Map/能量线，主要是画出歌曲的动态起伏。我们可以模仿上一条的参考轨来画出符合风格的能量线。
律动轨： 律动轨是用来制定出歌曲每个段落中的多层节奏律动的。我们可以直接插入一个MIDI块，然后如下图一样画出律动：
图中我用C1和D1来表示底鼓和军鼓，这样如果我把这个律动片段拷贝至鼓的轨道上，他们能直接触发相应的采样。其他节奏层则使用了Csus2和弦来标记，这样能够在最大程度上避免大小调的感觉，同时又不会听起来太混乱。当然你想用啥音标记都可以啦！当你找到一个合适的律动标记方法之后，别忘了为所使用的音高重命名，Rename Current Note，要不然几个月之后可能就忘了……
对于加花，我们在前期设计的时候可能还不确定某个地方应该怎样设计，但是我们可以先把加花的位置标出来。乐器加花不需要在这个层面上设计，但齐奏的加花可以在有思路之后标出来。
我在这轨挂了个ReaSynth，默认预设，用来回放写出来的律动。
我们还可以直接用这个律动作为制作时的节奏参考，方便音符对齐之类的。
在这个基础之上，我们甚至可以把不同的律动层设置为不同的MIDI通道，这样我们能够专注单一的律动层而做出设计。当我们在MIDI编辑器里让其他轨道可见的时候，Reaper只会显示所选的MIDI通道里的音符。
和弦轨： 用这个轨道标出歌曲的和弦。在这轨里，我继续使用了空白块在轨道上显示和弦名称，因为用它调整位置和长度的话会很方便。同时，空白块也可以使用Heda的Note Reader脚本，能让我们在进行爵士相关的即兴时提供实时的和弦显示功能。
我在这轨上保留了一个空白块，简单用鼠标拖拽就可以将其复制。对比手动建立空白块省去了许多步骤。

小贴士：
 我们可以使用 RSGC 进行制作分析：分析参考轨中歌曲的律动、和弦和段落，然后将其保存为一个新音轨模板，在今后可作为易用的参考。 对你自己所有的歌曲进行同样的操作，这是一种快速为歌曲确定律动与和弦结构的方法。我们也可以在改编时加载模板作为歌曲参考。 我们甚至可以把自己歌曲的RSGC策划发给需要录音的乐手，这样他(们)就不用拿着个TXT文件每个小节地去对你所发的音频了。  其他没了，玩得愉快。如果有什么问题或者建议的话，请随时提出。能提高工作效率的东西肯定是极好的。
下载RSGC英文版 下载RSGC中文版</description>
    </item>
    
    <item>
      <title>RCJacH - A Quest for Vocal Harmony (AQVH)</title>
      <link>https://RCJacH.github.io/cn/blog/rcjach-a-quest-for-vocal-harmony/</link>
      <pubDate>Sun, 17 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rcjach-a-quest-for-vocal-harmony/</guid>
      <description>A Quest for Vocal Harmony (AQVH) 是一首教学用阿卡贝拉作品，由我个人创作制作完成。这首总长只有54秒的歌曲，集中展现了12种基础人声和声编配手法。
歌词：
Bass Goes
Chord Stabs
Sustain
Listen
How do we approach vocal harmony?
With love and thoughts but mostly quandaries.
Keep alternating different ways, different chords,
just to beautify a melody.
But when the voices sing as one,
feel the power of unity
or dissonancy,
in this song
I sang to thee.</description>
    </item>
    
    <item>
      <title>模拟信号与电子信号的音量关系：-20 dBFS = 0 VU</title>
      <link>https://RCJacH.github.io/cn/blog/between-analog-and-digital-volume/</link>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/between-analog-and-digital-volume/</guid>
      <description>这篇文章会用最短的方式解释一下模拟信号与电子信号的音量关系。
图中有以下几点需要注意：
 电子信号会在0 dBFS的状态下遭遇电子削波，而模拟信号会在+24 dBu（也就是+20VU）的状态下遭遇削波。
 模拟设备在0VU以上会有逐渐增强的过载失真。
 因为大部分模拟设备不会显示20dB的动态余量，而电子设备会，所以我们在用DAW的时候需要自行留出20dB的动态余量。也就是说让每一轨、每一个插件的输出音量平均值保持在-20dBFS左右（之后细讲），这样能保证我们用电子调音台时能与模拟调音台预留同样的动态余量。
 在此基础上，我们可以使用各种防模拟失真的插件来模仿模拟设备的声音，例如AirWindows的Console4、ToneBooster的Ferox/Reelbus、Klanghelm的IVGI等等。
  </description>
    </item>
    
    <item>
      <title>REAPER JSFX - MIDI CC Eater CC屏蔽器</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-jsfx-midi-cc-eater/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-jsfx-midi-cc-eater/</guid>
      <description>昨天有个朋友问道自己的MIDI键盘会随机自动发送一些CC控制器的信息，导致录音的时候很困扰。我的M-Audio Oxygen键盘用了几年也出现这个毛病了，而且每几个月会发送不同的CC信息哈哈，所以我在此分享一下之前用JS写的CC屏蔽的插件，叫CC Eater。
如图，这个插件只有一个选项：你想要屏蔽的CC。你也可以通过选择最顶项来屏蔽所有的CC。
具体使用方法就是，当你点击通道上的录音键之后，通道会出现一个IN FX的选项。如下图中橙色箭头所指位置。
IN FX指的是Input FX（输入效果），也就是在你的信号录入电脑之前所处理的效果。他会对你录入的MIDI/音频有不可恢复的影响（Destructive），所以除了这种特殊需求以外很少去运用INFX。录音的朋友们尽量不要用这个Input FX为录音加压缩防爆音什么的…如果你录入的音频是爆音的，通常在出声卡的时候已经爆音了，所以你在DAW添加什么效果都没有用。具体请参考这篇录音输入音量标准。
点击这里通过官网Stash下载MIDI CC Eater，然后放到资源文件目录下的Effects/MIDI文件夹内就可以在Reaper里调用了！</description>
    </item>
    
    <item>
      <title>ReaComp到底有多强大？Pro Tools用户哭了。</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-reacomp-the-great/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-reacomp-the-great/</guid>
      <description>在音频处理方面，压缩一词经常被捧上天。尤其是对听感的音量变化还不是很敏感的那些初学者们，会觉得压缩处理好像是一个非常神秘的步骤。其实压缩器的性质与手动调音量一样- 衰减音量大的部分并提升音量小的部分 – 只不过压缩比手动画音量能在更短的时间内做出反应与相对措施。那么他对音频具体有什么影响呢？我们来通过Reaper自带的ReaComp来观察一下。
ReaComp的界面的确不是最华丽的，但麻雀虽小五脏俱全：
音频信号压缩的原理是把输入信号分成两份，一份通过压缩本身的信号处理，而另一份则被用于检测衡量信号。这两份信号都可以在ReaComp内进行一定程度的处理来达到所需的效果。我们用图来解释一下ReaComp内的参数分别是什么。
假设我们输入的音频是这个样子，中间有一段音量突出的片段。

如果我们想用压缩来控制这个片段的话，我们需要调四个参数。最重要的两个是ReaComp左侧的阈值 (Threshold)以及正中央的压缩比例 (Ratio)。当输入音频音量高于阈值时，会按着所设置的Ratio对高出的范围进行衰减 (GR = Gain Reduction)。例，当输入音量比阈值高出4dB而Ratio为4:1时，超出阈值的片段会衰减至所超出范围的四分之一，输出音量则会比阈值高出1dB。
剩下的Attack和Release两个参数是用来控制衰减行为的时间b。Attack参数决定了音频从高于阈值那一刻起到最高衰减所需要的时间，而Release决定了在音频低于阈值后衰减恢复到0dB的时间。我们看一下这张图可能会更容易理解，图中的压缩比例为无限:1，也就是说GR会把超出音量降至阈值。

Class Attack选项会改变Attack的曲线，让音头衰减更慢一点，如图:

Auto Release选项是根据GR程度来计算是否需要延长Release的时间。假设我们在压缩军鼓时选择了Auto Release。如果GR是3dB，那么ReaComp会采取Release设置的x微秒；如果GR达到了20dB，Auto Release选项会让Release时间超出x，让Release时间变长。可惜的是，这样的设置在听觉上不是很舒服。许多模拟压缩所采取的Auto Release是根据GR时间长度来决定Release时间，也就是说在军鼓上衰减5dB与在贝斯上衰减5dB所造成的Release时长是不一样的。期待ReaComp能在未来的哪天实现这个功能。
在Ratio下方有一个Knee Size参数，他决定了GR与Threshold的关系。什么意思呢？想象一下，我们录过的主人声。有一些句子唱的很轻，一些句子音量稍微高一点，而副歌的时候音量会非常大。这个时候使用同一个阈值与压缩比例显然不是很合适。为什么呢？因为如果我们把阈值设置成仅仅低于副歌部分，那么前面的句子就不会被影响；而如果我们需要压缩所有信号，可能Ratio不会让副歌的音量衰减到平均范围，或者会让主歌部分压缩太多。这个时候，我们可以通过Knee Size来让GR变得更圆滑，让信号在Threshold前后Knee/2的范围内都有着不同比例的压缩。如图。
无压缩
Hard Knee
Soft Knee

Knee Size 之下的Detector input决定了检测信号的识别方式。可选项为双声道、单声道左/右、侧链双声道以及单声道（通过Channel 3 - 4的信号来激发对Channel 1 - 2的压缩）、以及Feedback (通过输出信号来激发压缩，让压缩稍微更圆润一点)。我们可以根据压缩的不同目的来选择不同识别方式，具体会在今后的文章中介绍。

再往下的两个参数分别是低通（Low Pass）与高通 (High Pass)，这个是用来调节检测信号的频段。假设我们的输入音频是一个低频比较重的木吉他，而他的低频与高频动态不是很平均的话，当低频超过了阈值，它就会触发我们不想要的衰减。这个时候如果我们把High Pass调到高于这个低频的频段，就可以让压缩只根据高频的动态来对整个信号进行适应的衰减。另一种用法是把两个参数调成齿音的频段，可以当成一个De-Esser用了。

好吧，我承认以上的参数一般压缩插件也都有（虽然调制范围有不同），并不会让ReaComp显得多么独特。但不用怕，接下来的两个参数正是ReaComp的杀手锏，那就是RMS Size和Pre-Comp。
RMS是什么？RMS，Root Mean-Square，简单来说就是一段时间的平均值。当RMS为0的时候，检测的动态为瞬间峰值的音量，也就是很多其他压缩插件的Peak Mode。如果我们把RMS调成10ms，算法会以10ms为单位检测这段时间的平均值来判断是否需要压缩，这样我们能让衰减更圆滑一点。ReaComp的RMS最高可以调到1000ms，也就是一秒。如果能调到5分钟的话差不多能直接自动做母带压缩了呵呵。
Pre-Comp算法相对更复杂一点，但我们目前可以把他看成信号检测预留时间。例如，当我们有一个特别短的音头需要压缩掉的时候，把Attack调成0（这是模拟压缩做不到的一点）则会造成一定程度的失真（因为音频采样需要从某个点瞬间移动到另一个点）。针对这个现象，我们可以调Pre-Comp，让插件在处理音头之前就已经开始进行衰减了，这样当我们处理到音头的时候就不会造成突然地失真。效果如下图：

注意，因为使用Pre-Comp需要让插件提前识别之后的音频，会增加宿主的延迟，所以可能这个工具更适合后期混音而非现场演奏、录音。

好了，我们把ReaComp中大部分参数意义复习了一遍，也该讲一讲它的神奇之处了。这个技巧最先由Cockos论坛会员ashcat_lt提出，准备好颠覆我们对压缩的概念吧。

我们知道RMS是截取一个段落的平均值，我们又知道Pre-Comp能让插件“预知”一段时间的音量。那么如果我们把Pre-Comp设置成RMS的一半左右，我们处理的则是一个峰值与它前后一段时间的平均值。这样等于音量会自然地在峰值之前衰减，而在峰值之后恢复。同时，因为Attack和Release已经包含在整个程序内了，我们不需要额外地添加Attack和Release。峰值的音头形状可能稍微取决于RMS与Pre-Comp * 2之差。利用这个方法，我们可以把Knee Size和Threshold调到比平常高一点的位置，让输入音频一直保持Knee中间的状态，GR大概保持在1.5dB以下就好了。这个压缩技术的效果就是在保留音头的情况下非常自然地降低了动态范围，甚至根本听不出来压缩的痕迹!
操作起来很简单，你只需要如下图这样设置，然后根据你的输入及目的来调制红色框内的Threshold、Ratio、与Knee Size(其实都可以不动)。</description>
    </item>
    
    <item>
      <title>你还在画CC吗？其实Reaper这么用更强大！</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-no-more-cc/</link>
      <pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-no-more-cc/</guid>
      <description>许多人对Reaper自带的MIDI Control Change(MIDI CC控制器)功能很不满。可以理解，Reaper在MIDI CC这一块儿缺少了很多其他DAW特征性的功能，比如说Logic与AbletonLive的曲线功能，Cubase的Expression Map，Studio One的各种LFO形状的画笔等等。
虽然目前有一些能提高CC效率的工具，例如这款MIDI Velocity/CC Tool。
但他们治标不治本，无法大幅度提升编曲效率。尤其当我们做吉他
做弦乐
弦乐组
或任何需要画大量CC表情控制器的时候，这些工具所能给予的帮助实在是少得可怜。

再加上一个技术性的原因：Reaper工程文件是可以当成文本文件直接打开并修改的！我们可以用文本编辑器把某个插件段落的代码删掉，来挽救一个持续崩溃的工程。懂行的朋友还可以用GIT来监测工程版本，是一个很方便的功能。但我们开始画CC的时候会发现，因为每一个点都会明确记载，所以工程文件会变得无比巨大，轨道稍微多一点的工程体积会上到几十兆甚至一百多兆。如果你还开启了定时文件备份的功能（比如说每15分钟备份至新文件），你会在几小时之后发现硬盘空间少了好几个G！这真是一个迫使你去换新固态硬盘的好办法…

而参数包络在Reaper里反而更受到重视，不仅可以使用曲线，也有很厉害的脚本插件，比如说这款Envelope Point Generator

所以，我下了一个决定：用包络来代替CC！用包络来画曲线不仅减少了工程文件大小，也能让修改的时候变得很轻松（时间和位置只需拖拉一个点，而不需要每一个CC信息都细修）。
那么这个怎么做到的呢？有以下两种方法。
一，用ReaControlMIDI来控制CC参数。 Reaper自带的ReaControlMIDI长这个样子:
而我们需要用的是红色方框内的功能。首先先点击橙色箭头指向的Enable选项来开启这个功能，用右边的RawMode来开启传统128位的CC系统，然后用下方的菜单来选择需要控制的CC参数，最常见的估计是CC1（力度/颤音深度），弯音轮，与CC11（表情/音量）。
记得把它排列在音源前面。
这个时候我们点击轨道上的trim标签
来打开包络设置。
我们能看到ReaControlMIDI所有可以操作的参数，其中包含CC1、PW、和CC11。我们只需点击红色圈内的选框就能把包络当成CC来画啦！

二，使用音源参数 当我们把上一个小节的方法运用到音源参数的时候，会比通过ReaControlMIDI中转成CC更直接。我们可以直接控制任何音源所有可以操作的外部参数，例如这款免费合成器Helm所包含的一部分参数:
Reaper版本5.1开始支持用MIDI CC来直接控制参数，不需要经过ReaControlMIDI，如图。
注释：选择一个可控制的参数，通过选择Param -&amp;gt; MIDI Link -&amp;gt; CC -&amp;gt; 我们需要的控制器编号。图中使用的JS只是模拟CC 1的输入。

如果想利用插件（如JS脚本或序列器）在原MIDI基础上添加新信息的话，只需要右键插件输入输出选项，在MIDI output菜单里选择Merges with MIDI bus（感谢Tee先生的补充），如图：

当然，我们在编曲时使用CC最多的恐怕是Kontakt内的采样音源。我们可以通过Auto一栏的Host Automation（宿主自动化）来设置。
有一些音源，尤其是Native Instruments自家的音源，已经给你设置好了，比如说这款Granduer钢琴。
这种音源你可以马上用起来！比如在钢琴轨上通过修改”Color”、”Transient”、“Tonal Depth”三个包络，让音源在不同段落包含着不同的音色与音头强度，比后期压缩要更有针对性。

对于非NI本厂的音源来说，很遗憾，我们没有办法享受到已调制好的预设。所以需要自己动手，做一次最初的设置，然后保存为乐器模板。方法如下:

首先加载音源，例如Orange Tree Samples公司出品的Strawberry吉他，然后把Host里任何一栏拖拉到需要调制的参数上。如果这个参数是可以通过外部调制的（按钮与旋钮），鼠标箭头会变成一个带有加号的箭头，否则说明此参数不能被外部控制（下拉菜单）。
稍微花一点时间把所有参数都设置成宿主自动化吧，必要的话可以用Param菜单的Alias Parameter功能为某个包络控制起一个自己能看得懂的名字。
当我们把每一个常用参数都设置成一个宿主自动化之后，就可以随心所欲的画曲线了！像下面这一轨电吉他
记得右键轨道选择Save tracks as track template来把设置好的选项保存为轨道模板噢！</description>
    </item>
    
    <item>
      <title>5个常（cuo）见（wu）的乐器练习方法</title>
      <link>https://RCJacH.github.io/cn/blog/how-not-to-practise-an-instrument/</link>
      <pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/how-not-to-practise-an-instrument/</guid>
      <description>不少音乐学习者有一个很经典的练习套路：
 每天练琴先用爬格子、音阶、和各种哈农类型的技巧提高练习噪上个半个小时或更久，直到手指感觉“进入状态”了。 紧接着马上挑一首新曲目，双手从第一小节起，小心翼翼磕磕碰碰地弹上个几页。跟着节拍器从一个较慢的速度开始，在稍微熟练之后逐渐增加速度直到弹奏的速度上限，然后合上谱子。 这俩小时过去之后，已经足够热身了，所以赶紧趁热弹几首熟练的曲目。毕竟今天经历了这枯燥的俩小时，至少得放松一下。让双手在乐器上飞一会儿吧，看看有啥进步，速度是不是比原先快了？ 当一个曲目熟悉得差不多能背下来的时候，反复再弹个十几遍直到弹奏变成肌肉记忆，脑子都不用想手指就能给弹出来。 在演出当天以及前一天，疯狂地练习该曲目，并且用最快的速度争取多弹几遍。最后的机会了，争取能多弹几遍就多弹几遍，反正多练肯定是好的。  是不是听起来很耳熟？甚至感觉身边的朋友每天就是像这样刻苦地练习着乐器？
很可惜，以上五条程序都是错误的！这五条里每一个细节都是错误的。它们效率低下、违背了人体肌肉与记忆的机能、同时非常容易养成坏习惯，极度限制了未来的发展空间。
这些练习方法究竟错在哪里呢？
误区一：演奏技巧是练肌肉  人类从5至6岁开始就已经拥有足够的肌肉去开始弹奏乐器了，并非需要在增加肌肉上面浪费宝贵的时间。如果肌肉能决定弹奏水平的话，那么我们是不是放下乐器去泡健身房会更有效一点呢？我们学习演奏技巧的目的是让我们的大脑有能力去控制我们的身体，所以技巧练习是要去练习大脑而并非练习手指。如果在练习的时候，我们没能每时每刻都用大脑去引导自己的肢体的话，包含手指、手臂、后背、腰部、以及腿部肌肉，这些技巧练习是没有任何价值的。  用大脑去引导肌肉的练习是非常消耗体力的。一个未受过相关培训的成年人，强力集中注意力的承受时间是在几十秒至两分钟。也就是说，当我们全身心地投入进乐器练习的时候，不出几分钟就会感到大脑开始疲惫。这个状态下继续练习的话，我们能明显感到控制能力和学习效率有所下降。所以那些一次性持续练习半个小时或者好几个小时还不累的人，可想而知其练习效率了。正确的练习间隔应该是练几分钟（这个时间段会随着能力提升逐渐增加到到大约20分钟或者更长），休息一两分钟，然后再继续并反复此过程。
  误区二：学曲目应该慢速从头到尾弹 我们学习曲目最忌讳的有三件事儿：一是从头学，二是双手学，三是慢慢学。  大部分曲目都会有几个核心的旋律主题、核心的演奏技巧，散布在曲目中的各个段落。我们应该先把这些核心内容挑出来单独练到十拿十稳，这时候我们会发现整个曲目百分之七八十已经差不多学下来了。剩下的时间应该针对曲目中的技术难点，才不会把时间浪费在那些已经能熟练弹奏的音乐段落上。  对于音乐练习中遇到的任何技术难点，无论是唱歌时音准节奏、弹琴时的手指分配、还是打击乐的肢体搭配，最有效的练习方法就是把大问题分散成更小块儿的单一技巧来练。例如把双手合奏分成单手来练，双声部分成单声部来练，多小节的内容拆成单个小节或者更短的片段。这样我们才能把大脑所有的注意力专注在一个点上，凝聚更多脑细胞去开发并提升这个能力。当然，如果不是技术难点的话，就不要多花时间分开练了。因为我们追求的是学习速度！  这也是最反常识的一点，很多人都会认为慢是一件好事儿。其实不然。就如一万小时法则一样，我们需要重复一万次才能真正学会某种能力。以普通练习的效率来看，弹奏一万遍是一个很困难的事情。但如果按着上一段解释的，把大的问题分成小块儿来练习，甚至小到一秒钟重复两三遍，那么这个技巧我们只需要大约一个小时就能熟练掌握了。当我们全身心地投入进正确的练习当中，每一分钟应该都有比较明晰的提升。当然这不是指一分钟就能弹得很棒，而是指每一分钟我们都能发现大脑思路比之前更顺一点、控制能力更强一点、发挥更稳定一些。如果我们练习的时候发现进度很慢，说明我们练习方法不对或者所练习的内容不对。赶快停下来，思考一下有没有其他方法或者能否把练习再简化再碎片化。
  误区三：练习时间越长越好 因为我们练习效率会随着练习时间长度而下降，所以把练习时间拆分成20至30分钟的段落，并且保证10分钟左右的休息间隔会更有效率。每次练习结束之前，我们需要慢速无错误地重复一遍今天所学的内容。这样才能告诉我们大脑最正确的信息，让它在剩下的时间里（尤其是深度睡眠的时候）能够整理思绪并只保留正确信息。
误区四：学乐器要练成肌肉记忆 回到学习曲目的话题。永远不要相信肌肉记忆。它的确能够让我们看起来很熟练，但是会有两个问题。首先肌肉记忆很难运用到新的曲目中，所以每次学习新曲目的时候都会感觉像一个新的开始。其次，依赖肌肉记忆另一个很大的问题就是演出当场很有可能会出现大脑空白的时刻。这种现象在歌手演讲家中更加明显：忘词了。这些问题是可以通过用大脑记忆去避免的。当我们所有的动作以及所有动作的意图都是通过大脑下意识进行的时候，我们演奏出来的音乐才有百分之百的表达力、控制力、以及感染力。
误区五：演出之前多练几遍会更顺 演出之前不要全力弹奏曲目。
演出之前不要全力弹奏曲目。
我们演出的时候，肾上腺激素会让我们心跳加快，让我们大脑接受3-5倍的信息。很多人因为控制不了这个感觉而所以会紧张、弹错、甚至怯场。演出的时候，我们需要的不是提高弹奏机能，那个是日常练习的目的。我们真正需要的是把自己的身体调制成能够让大脑在演出时放松下来的状态，让它能够平和的去操作自己的身体以及行为，能够放开体验演奏所带来的新鲜感。演出当天甚至当周，练习过久过累都会让大脑疲惫，导致大脑没有精力放松，也没有精力控制身体的行为。演出之前进行一遍比全速稍微慢一点的弹奏，一遍中速度弹奏，再接着一遍慢速无错误的弹奏就可以收拾了。如果有任何出现问题的片段，用中速和慢速无错误的片段弹奏来修复。That&amp;rsquo;s it.

以上泛泛地介绍了一下大众（尤其是家长）对日常练习的一些误区。具体正确的练习方法我会在今后的文章中具体讲解给大家的。</description>
    </item>
    
    <item>
      <title>录音输入音量标准</title>
      <link>https://RCJacH.github.io/cn/blog/recording-volume-calibration/</link>
      <pubDate>Sun, 07 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/recording-volume-calibration/</guid>
      <description>这篇文章是录音输入音量标准的解说。
我发现国内的录音爱好者和一些职业录音师，对于输入音量并没有一个绝对标准（除了用耳朵听这种无法衡量的行为），这导致同一个录音工程的同一轨会有不同音量标准的文件，甚至输入太热导致爆音。由于语言与文化的差别，我决定不逐字翻译，仅把结论和简单的理由列了出来。
关于录音输入音量所需注意的事项：
 用24位或更高的音频录音。   正式录音前，试录整个演奏中音量最大的部分，并观察你的输入音量。
 用你链接麦克风之后的第一个音量/增益控制钮调整输入音量，以保证你的硬件本身不会爆音。它通常在你的麦克风前级上（别名话放）。让平均音量处于-18dB左右，偶尔峰值达到-10dB左右。
 如果你拥有高端的话放并想要利用其饱和度(Saturation)为录音染色，在上一个步骤的状态下慢慢提升你的输入音量达到渴望的染色，再把设备输出音量往回调到平均值-18dB左右。
 不要动DAW里录音轨的音量推子！这样你才能清晰地看到你的输入音量是多少。
 如果你觉得输入音量太小听不到，拉低工程内其他音轨的音量，并把你的监听音量开大。不要因为听不到录音的音轨而提升录音轨音量！
 重要的事情说三遍，不要动DAW里录音轨的音量推子！
  原因：
 24位音频的动态范围是144dB，而16位音频的动态范围是96dB。计算方法为6乘以比特位数。
 大多数硬件信噪比在70dB-80dB之间，再加上30dB-50dB的乐器动态范围，就超出了96dB能精准记载的程度，降低了信噪比，导致噪音音量的提升。
 后期各阶段的压缩会继续降低信噪比。
 为了不让音量峰值部分爆音，我们还需要为预留一些额外的空间，称为动态余量。
 在后期处理中，使用软硬件效果器之前，我们依然需要把音频输入音量调到一个标准范围（通常效果器对不同动态会有不同的失真与压缩处理）。
 24位音频的144dB的动态范围能够精确地记载录音信号，同时也能预留出动态余量，所以请好好利用其优势！
  </description>
    </item>
    
    <item>
      <title>在线吉他指板</title>
      <link>https://RCJacH.github.io/cn/blog/website-online-guitar-fretboard/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/website-online-guitar-fretboard/</guid>
      <description>最近一个朋友用vexflow脚本做了个在线吉他指板。目前不支持移动端，但电脑端的朋友可以试试玩，点击任何一品添加记号。

页面低端有三个选项，所有选项只对之后添加的记号有影响。Showname代表记号显示音名，Sharp/Flat选择表示这个显示的音名如非自然音会使用升号或降号。Playback指的是每次点击会播放对应音高的音频。听起来不是采样，估计是用算法合成的？
右键指板可以选择保存为本地图片。

这个网页还可以添加一些querystring来修改参数，比如说：
http://yxonic.github.io/fret/index.html?strings=6&amp;amp;start=1&amp;amp;end=11&amp;amp;width=800&amp;amp;tuning=Eb,Bb,Gb,Db,Ab,Eb

上面地址中的strings=6代表有六根弦，如果想要个贝司指板可以改成strings=4。

后面start=1表示从1品开始(最低品)，end=11代表最高只到11品。Width=800应该表示指板整体像素长度。后面的Tuning应该是从上到下（细到粗弦）的顺序。

以上这些参数都可以随便调节，疯嗨吧！

PS. 以后博客各种谱子也争取运用vexflow的技术生成图片，近期会把功能嵌入到本博客。</description>
    </item>
    
    <item>
      <title>REAPER简介</title>
      <link>https://RCJacH.github.io/cn/blog/reaper-introduction/</link>
      <pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/reaper-introduction/</guid>
      <description>从今天开始，本博客将在吉他/乐器练习与乐理的基础上开启新的Reaper内容分类，这个分类将主要包含REAPER (Rapid Environment for Audio Production, Engineering, and Recording) 这款DAW的进阶使用理念、音乐制作的思路与操作、音频录音与后期处理等内容。

国内用Reaper的不是很多，大部分还是处于FL Studio, PT, Cubase, Sonar, Logic, 和Live这几种更商业的DAW。当然Reaper在国外也不是很嚣张，因为人家压根没有花一分钱在宣传上，靠的都是口碑。什么是宣传？当你看到国外大师级别的录音/混音/母带工程师微笑地讲解着某个DAW功能的高清视频…嗯，那就是宣（Dai）传（Yan）。大部分音频工作者真正工作的时候都是因为某些功能不顺手、不稳定或者满足不了需求而心里默默跑过了一万只羊陀。

所以Reaper诞生了。目前有一些大牌的游戏与影视音效、音乐设计师公开表达他们对Reaper的爱：
David Farmer (霍比特人、蚁人、暗黑3、魔兽世界等)
Ariel Gross (质量效应、星球大战游戏等)
Eduardo Vaisman (分裂细胞6：黑名单、孤岛惊魂4等)
Ryan Canestro (影视作品列表)
除了音频处理功能上有实力与其他DAW竞争，Reaper包含了一下几个其他DAW只能仰望的特征：
价格 Reaper支持60天无限制的免费试用，并且用户可以在试用期之后继续使用，而限制只有打开界面时5秒钟的购买提示。如需购买正版，Reaper针对年营业额低于两万美金的商业个体或团体，以各种教育机构有一个60刀的折扣版，比不少插件都要*便宜很多*。同时，每一个正版的授权可以免费享用两个大版本的升级。如果你是版本5点几发布时购买的授权，你可以免费升级到6.99。按照Cockos他们家一年半一个大版本升级的进度来算，代表着3年左右的免费升级。相比之下Cubase8升到8.5还得花钱的是不是弱爆了?
更新速度 Reaper平均每两天放出一次微型的beta版本更新，修正一些Bug、添加一些API、增加一些新功能之类的。每次更新之后团队会在论坛里获得一些反馈，通常出现任何问题可能*当天*就修复了（每年元旦第二天就开始持续更新了）。
当然啦，普通用户可能不需要保持最新版本，而且beta版通常是为开发人员准备的。这种互联网形式的更新与反馈速度倒是值得学习一下。
自定义界面、菜单、宏 这点是Cockos公司创始人Justin Frankel (之前是Winamp的开发者) 一直强调的。先不说自定义快捷键这种行业标准，Reaper里差不多所有的界面与菜单都可以自定义。很多人首次打开Reaper觉得界面不美，但其实我们可以使用官网上用户自制的皮肤。
比如这个： 这个： 这个： 或者适合双屏的这个： 也有很多模仿款的： PT Logic皮肤与付费版 Sonar皮肤 Adobe Audition 2017皮肤 
菜单方面，很多人刚开始使用的时候会觉得很乱没有逻辑。我之前也这么觉得，所以在这里推荐一下我目前正在使用的菜单系统，ReaMenus（貌似需要SWS扩展）。

使用方法： 把ReaMenus下载文件放到Reaper的资源文件目录中的MenuSets文件夹内，在Option菜单里的Customize menus/toolbars选项内，下方有一个Import。点击后选择新下载的文件，你就能看到整个菜单都变了样子呢！可惜目前菜单不支持K酱的中文翻译版，以后说不定。
而宏又是什么呢？在Reaper里，一个宏是一群操作的组合。通过宏，我们可以用一个快捷键执行多个操作。例如我们可以按一个键Solo所有名字里带有DR的轨道（鼓组），或者一键把选中的item通过原轨道效果导出成音频段放在新的一轨中（保留音量、相位包络和发送设置），也可以结合多个自制脚本达到意想不到的效果。

自制脚本 目前Reaper支持Lua、EEL、C++、Python、以及自家的Jesusonic Effects（JSFX）五种脚本语言，其中JSFX与EEL偏向实时音频或者MIDI处理。通过这些脚本，我们可以做到很多DAW本身做不到的功能 &amp;ndash; 从简单的信号处理，到改变工程制作方式（例如仿Ableton Live的Playtime），甚至自动生成MIDI也可以哟！你可能会问：“我不是程序猿怎么办？”没关系，Reaper已经自带上百个JS效果，并且官方论坛上也有很多用户自制的免费脚本。如果你能想到什么奇特的功能，不妨在论坛上留个言，也许会有大神给你写出来一个也说不定哦。
RCJacH的ReaPack Repository包含REAPER Daw使用的Lua和JS脚本与效果器</description>
    </item>
    
    <item>
      <title>【吉他】Bossa Nova吉他十分钟入门！</title>
      <link>https://RCJacH.github.io/cn/blog/bossa-nova-guitar-in-10-minutes/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/bossa-nova-guitar-in-10-minutes/</guid>
      <description>这篇入门文章是针对想要迅速学会巴西传统的Bossa Nova吉他的同学。为了能快速学会这个风格，我们需要抛开很多对此风格的误解，只保留最纯真的核心内容。同时，这篇文章假设读者已经熟练基本的按弦、拨弦、以及和弦转换，并能迅速的在指板上找到单音。
我们速速开始吧！
因为Bossa Nova歌曲很多只有一把吉他伴奏人声，所以弹奏时通常分高低音两个声部，高音作为节奏组，低音作为贝斯。传统Bossa是很缓慢很放松的，低音永远在一三拍上。很多不理解bossa文化的人把低音改的特别复杂，各种八分音符。那是Salsa，不是Bossa。Bossa里面，低音只有一三拍。
我们先拿常用的Dm9来练这个节奏吧。请打开你的节拍器。
低音部分很简单，只有两个音！
记住，只弹一三拍。Bossa Nova风格色彩主要是在多变的爵士功能和声与穿插于协和不协和之间的旋律上面，节奏部分相对来说很简单的。
高音部分也只是稍微复杂一点。除了前两拍和最后一拍在正拍上，其他都落在反拍上。
两个部分交替着练习，每过20秒换另一个声部。在这两个声部弹熟了之后可以试试把两者合并到一起，如下图。
当两个声部一起弹的时候，一个声部能弥补另一个声部的空拍，要习惯用这种感觉来抓稳节奏。
记住所有多声部的节奏都可以用拆分的方法来练习。当你能熟练地分别弹奏每一个声部的时候再把他们组合到一起。这种熟练度是用弹奏速度来衡量的，一般单声部至少需要无错误地、稳定地达到目标速度的120%才能在组合情况下在控制内原速弹奏。
P.S. 钢琴也要单手练！
当我们能熟练地把这个律动套在Dm9和弦上之后，我们可以换个和弦试一试。换成什么呢？我们现在弹得是个小和弦，在功能里是一个2，那接下来应该是个5吧！学会25能弹不少歌了。
下图中四个和弦指法是务必要学会，分别代表根音在五弦与六弦的2与5，和根音在六弦与五弦的2与5。音符旁边的数字代表左手手指（食指=1，小指=4）。我们先忽略各种和弦扩展变化，可以暂时只把这四个当成最常见、最经典的按法。
第二个G13和弦我用红色标记出了在这个套路里，比黑色的标准指法更合适的指法。这样所有根音都只用中指来按，食指一直保持在四弦作为引导手指，用来找位置更方便。不过为了以后能接触更广的和弦排列，两个指法都要学哦！第三个和弦，也就是根音在六弦的小和弦，现在是用左手无名指的一个小横按来弹奏的。如果你暂时弹不了小横按，你也可以把左手四个手指都用上，每个手指从低到高分别只按一个音。
图中第一个与第四个和弦底下括号内橙色的音符是交替贝斯音，其实就是在六弦上与根音同品的五级音。
这四个指法都熟练了吗？试试把他们当成12个调内的25都弹一遍吧！注意换和弦的时候不要抢拍哦！
小贴士： + 有一些歌曲会省略第二小节的节奏只重复第一小节。 + 巴西本土记载方式是用两倍速在一个小节内写完，为了更清楚的表达这个律动概念，我选择了使用北美更认可的双小节八分音符的记载方式。 + 有时候，你并不需要弹和弦的每一个音，你甚至可以省略根音来让和弦变得更轻松，尤其是当你与其他乐器合奏的时候。 + 当你能顺利的用十二个调弹奏上面列出来的四个指法之后，你只需要把这个套路套在不同的和弦指法上。慢慢增加你的和弦词库吧！一天学一个和弦一年就是365个。</description>
    </item>
    
    <item>
      <title>吉他基础之熟悉指板</title>
      <link>https://RCJacH.github.io/cn/blog/the-guitar-fretboard-exercise/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/the-guitar-fretboard-exercise/</guid>
      <description> 最近我意识到这个博客缺少了吉他类很重要的一篇文章，那就是最基础的熟悉指板 - 知道指板上每个音的名称。有多重要？我敢说这个能力决定了你是否能有意识地在吉他上创造音乐。因此，我想与大家分享它的练习方法！

这个练习的起源应该是来自Joe Satriani的Guitar Secrets一书。
它的思路是，比起按指板去记音名（即五弦6品是个降E），我们更应该按着音名去记指板（即D是在三弦7品），因为作为音乐人我们创作的时候第一反应通常是某种形式的乐谱（音高+节奏）而非固定的指板图。

练习方法如下：  打开节拍器并将速度设置成60，如果你是吉他初学者可以把速度稍微放慢一点。
 从C开始。找到第六弦上每一个C。每拍弹一个音。如果你错过了一拍，那等下个拍再弹。别抢拍！就算弹错了也要保持冷静。当你找到了六弦上所有的C（第8品和第20品，如果你的指板有那么宽的话），向上移动到五弦，然后四弦，直到你把整个指板上每一个C都弹一遍。
 选择另一个音。我喜欢逆行五度圈，所以下一个音将是F，然后是降B、降E等等。
  重复以上步骤直到你把所有十二个音级都弹一遍。

小贴士：  你可以限制指板最高把位为11品（尤其是古典吉他），这样你每根弦只需找一个音，而且不需要很夸张地去够12品以上的位置。
 在前期当你还不是很熟悉指板的时候，你甚至可以限制自己只弹没有升降号的自然音符。
 你还可以把表上音名的指板图打印出来。无所谓，反正很快你就觉得看图找只会影响速度了。
 这个练习你每天只需要过一遍。我现在整个练习下来也就不到一分半。
 一旦你对指板有个大概的感觉，你就可以在没有吉他的情况下进行这个练习。你只需要想象把你的手指放置到正确的位置上，而你想象中肢体动作的速度将决定你实际弹奏的速度。
  </description>
    </item>
    
    <item>
      <title>【吉他】爵士和声基础之属和弦</title>
      <link>https://RCJacH.github.io/cn/blog/jazz-chords-dominant/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/jazz-chords-dominant/</guid>
      <description>在爵士吉他和弦solo或者comping风格里，为了在同和声功能内用最高音组成连贯的旋律，我们需要学会同一个和弦的不同按法。以下列出了一些属功能内比较常用的voicing（声部排列）。
例子为根音在六弦的Bb7和根音在五弦的Eb7，我们可以用同样的指法套于任何和弦上。
图片中每行代表一个扩展程度，分别为7，9，11（或sus），13和弦。*每一竖列是根据指法相关程度来整理的*，这样方便我们推导与记忆。和弦名旁边蓝色括号内的数字代表最高音在和弦内的级数，利用不同的高音与扩展，我们可以在同一个和弦内旋律。
一次性学习这么多个不同的指法并不助于记忆，但我们可以从最简单的开始。选一个调，用十二小节布鲁斯(1411 4411 5411)来逐级练习不同指法。我们第一遍每一个和弦变化可以只用最开始的指法，熟悉之后每个小节换一个voicing，再进阶的时候可以每两拍换一个按法，慢慢过渡到每一拍一换。Make Music！</description>
    </item>
    
    <item>
      <title>【吉他】单弦音阶</title>
      <link>https://RCJacH.github.io/cn/blog/single-string-scales/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0800</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/single-string-scales/</guid>
      <description>前言 作为吉他弹奏者，我们每日的练习充满了各式各样的自然音阶、半音音阶或和弦音阶，以及不同的弹奏技巧、乐句和伴奏形式。为此目的，我提出一个非常有效及高效的方法，那就是单弦音阶。这个练习对于熟悉指板、摆脱固定把位的限制、以及建立更音乐性的思维都能有非常明显的帮助。市场上有几本非常好的吉他书记也提到了这个练习，例如The Advancing Guitarist和The Serious Guitarist - Right Hand Picking。

单弦音阶 那么单弦音阶（SSS）到底怎么练呢？ 这个系统里，一共有三个不同级别的练习限制。

第1级： 想象你的吉他只有一根弦 - 任何一根弦 - 然后在这根弦上弹以空弦为主音的音阶。比如说，如果空弦是E的话就弹一个E音阶。
如果你在选择音阶类型上有些犹豫的话，尝试一下大调音阶。因为所有的音阶级数及音程都是建立在大调音阶的基础上，多花点时间熟悉他们肯定是没有坏处的。作为提示，以下是*大调音阶*各个级数的弹奏位置：
VexTabDiv.Artist.NOLOGO = true optionsbeam-rests=falsescale=0.8tabstaveclef=treblenotation=truetablature=truetime= C key= E notes :8 [ 0-2-4-5/1 ] [ 7-9-11-12/1 ] | :8 [ 12-11-9-7/1 ] [ 5-4-2-0/1 ]--
牢记这个数字规律之后你就可以自己推断十二品以上的位置了。
争取练习所有的音程，任何你能想到的模进以及交替连奏和断奏的弹奏方法。换句话说，MAKE MUSIC! 以下是一些练习的主意，你可以把他们变化着来弹：
三度音程： 三音模进： 两音模进 + 空弦： 三音模进 + 空弦： 当你掌握了大调音阶，尝试用不同的音阶和调式来练习以上的例子。当然你也要去发明自己的练习哦！通常，比起很多人极度依赖的把位弹奏，以这个方法创作出来的旋律会额外的清新与鲜艳。

第2级： 在你熟悉了以空弦为主音的音阶后，你可以让 主音 落在 第一品，然后用同样的方法练习。这回，你也许无法利用空弦来移动把位，所以需要更干净和更细腻的动作。 以上练习熟练之后，尝试把任何一品定义为音阶主音，这样你能对吉他指板上每单独一根弦，每一种音阶与任何位置都能获取全面的控制和自由。你可能需要在大幅度的把位移动时脑子里想着音名。这是个很好的现象。</description>
    </item>
    
    <item>
      <title>更有效的节奏概念 - 16进制节奏型</title>
      <link>https://RCJacH.github.io/cn/blog/rhythm-in-hex-intro/</link>
      <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/rhythm-in-hex-intro/</guid>
      <description>对于音乐学习者来说，尤其是小时候没有机会接触音乐教育的成年人，节奏通常是一个很头疼的问题。我们经常看到这些人在唱歌的时候会跟不上伴奏、弹琴的时候找不到拍子，可能听歌的时候也无法跟上律动。其中一些人能感受到自己的无奈，另一些人选择了沉默，有的人甚至还没有意识到自己的问题。
节奏是音乐最基础的元素，其重要性甚至超越了音高。当我们无法感受到稳定的节奏，或者没有能力融入歌曲的律动，就无法完全进入音乐状态，就会被音乐隔离在外。无论是演唱、演奏、还是聆听，如果能跟上歌曲的律动就能瞬间进入音乐状态。
很多人认为节奏的掌握，甚至音乐本身，是需要从小到大十几年甚至几十年的累计。我不敢苟同。这些基本的音乐素养，对于一个18岁之前接触过音乐创造（泛指吹拉弹打唱等任何非纯听歌的音乐活动）的成年人，是可以在短期（几个月至十几个月）通过更有效的理解与练习方式，坚持每天几分钟的练习，来达到很可观的水平。有的在节奏熟练度甚至能达到内地职业乐手的水平（虽然内地职业乐手水平也不是多高的标准）。
对此，我提出一个新的节奏理解与练习的方式：比起单独去分辨每一个节奏元素，不如去熟悉每一拍常见的节奏组合，这样我们才会把注意力从一点转移到每一个片段，然后逐渐拉远到整体。当我们以节拍为主体的时候，我们才敢去感受节奏本身，感受作曲家最初的音乐目的。
原文为英文，今后会抽空翻译成中文。点击阅读Rhythm in Hex</description>
    </item>
    
    <item>
      <title>英文缩写规则</title>
      <link>https://RCJacH.github.io/cn/blog/english-abbreviation-in-naming/</link>
      <pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://RCJacH.github.io/cn/blog/english-abbreviation-in-naming/</guid>
      <description>在音频制作时候，经常会遇到音轨名称太长的情况，比如说PAD Sequence Glitter，或者Electric Guitar Wah Tremolo。这么长的名字一般DAW是不会显示的，所以我们需要简化这个音轨名称让DAW能正常显示所有的文字。前些日子看了一篇关于英文缩写的规则，翻出来分享一下：
英文缩写：（abbreviation，来自于拉丁语中的brevis，代表short简短）
 Shortening：缩略一个词使它保留原单词的前几个字母，一般会在结尾加一个句号&amp;rdquo;.&amp;rdquo; 例：cont. = continued。
 注释：如果缩略单词能形成另外一个单词，句号会被省略。例：limo = limousine。
 这种缩略不一定是非正式用语，比如：bus = autobus，taxi = taxicab等等。
 注释：有些时候会为了发音或拼写对缩略单词进行变化，例如：bike = bicycle。
  Contraction：使用单词第一个字母与最后一个字母，并省略中间的字母。例如：Dr. doctor, St. = saint/street。需要在结尾加句号&amp;rdquo;.&amp;ldquo;。另一种缩短方式是用单引号apostrophe &amp;lsquo; 来标注省略字母，比如说：can&amp;rsquo;t = cannot，didn&amp;rsquo;t = did not等等。
 注释：我个人发现另一种缩短的方法：省略元音与重复的字母，保留辅音。例如：cls. = Class， src = source，gtr = guitar。  Initialism：对于词组，可以使用每个词的首写字母。CIA/C.I.A.，US/U.S.。这种缩写方法越来越倾向不使用句号来分开字母。
 Acronyms：这种缩写方法是让词组的每个词形成另外一个完整的单词，比如：AIDS，laser，或者像DAW以及Reaper。这种情况缩写反而成为了常用的词汇，而完整体通常用于解释目的。
  灵活地去运用以上四个方法，我们便可很便捷地、系统地去简化音频相关英文单词。例如之前的PAD Sequence Glitter可以写成 PD sq Gltr，而后者可以标记为EG w trem。这样一眼就知道每一轨代表什么乐器了。</description>
    </item>
    
  </channel>
</rss>